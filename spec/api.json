{
  "openapi": "3.0.0",
  "info": {
    "title": "Transporter API",
    "version": "1.0.0",
    "description": "This is the API layer for Adobe I/O Console."
  },
  "tags": [
    {
      "name": "projects",
      "description": "APIs for I/O Console Projects"
    },
    {
      "name": "workspaces",
      "description": "APIs for I/O Console Workspaces"
    },
    {
      "name": "AppRegistry",
      "description": "APIs for Exchange AppRegistry"
    },
    {
      "name": "Organizations",
      "description": "APIs for Organizations"
    },
    {
      "name": "AtlasPolicyEngine",
      "description": "APIs for Atlas Policy Engine"
    },
    {
      "name": "DevTerms",
      "description": "APIs for Developer Terms"
    },
    {
      "name": "Clients",
      "description": "APIs for Credential Clients"
    }
  ],
  "paths": {
    "/console/organizations/{orgId}/integrations/adobeid": {
      "post": {
        "summary": "adobeid create integration",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Adobeid"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "apikey": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"WebApp\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"WebApp\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"platform\":\"WebApp\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"WebApp\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"WebApp\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"WebApp\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/integrations/adobeid\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"WebApp\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"WebApp\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/adobeid/{intId}": {
      "put": {
        "summary": "adobeid update integration",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "integration id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "platform": {
                    "type": "string"
                  },
                  "urlScheme": {
                    "type": "string"
                  },
                  "redirectUriList": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "defaultRedirectUri": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "form",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "apikey": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "createdDate": {
                      "type": "string"
                    },
                    "lastModifiedDate": {
                      "type": "string"
                    },
                    "namespaceEnabled": {
                      "type": "boolean"
                    },
                    "technicalAccountId": {
                      "type": "string"
                    },
                    "platform": {
                      "type": "string"
                    },
                    "urlScheme": {
                      "type": "string"
                    },
                    "redirectUriList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "defaultRedirectUri": {
                      "type": "string"
                    },
                    "userConsent": {
                      "type": "boolean"
                    },
                    "typekitPreviewTokenEnabled": {
                      "type": "boolean"
                    },
                    "readOnly": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PUT \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D';\n\nlet options = {\n  method: 'PUT',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.put(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/adobeid/{intId}/services": {
      "put": {
        "summary": "subscribe adobeid integration to services",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "integration id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "sdkCode": {
                      "type": "string"
                    },
                    "licenseConfigs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "productId": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "selected": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "description": "form data",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sdkList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "errorList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PUT \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D/services \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}]'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D/services';\n\nlet options = {\n  method: 'PUT',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}]'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D/services');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}]');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.put(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D/services\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D/services\"\n\n\tpayload := strings.NewReader(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D/services\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D/services\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/adobeid/%7BintId%7D/services\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/download": {
      "get": {
        "summary": "Download workspace json",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download workspace json file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "project": {
                      "type": "object",
                      "description": "Root element",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Project id"
                        },
                        "name": {
                          "type": "string",
                          "description": "Project name"
                        },
                        "title": {
                          "type": "string",
                          "description": "Project title"
                        },
                        "description": {
                          "type": "string",
                          "description": "Project description"
                        },
                        "org": {
                          "type": "object",
                          "description": "Organization info",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Organization id"
                            },
                            "name": {
                              "type": "string",
                              "description": "Organization name"
                            },
                            "ims_org_id": {
                              "type": "string",
                              "description": "Ims organization id"
                            },
                            "workspace": {
                              "type": "object",
                              "description": "Workspace info",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Workspace id"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Workspace name"
                                },
                                "title": {
                                  "type": "string",
                                  "description": "Workspace title"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Workspace description"
                                },
                                "details": {
                                  "type": "object",
                                  "description": "Workspace details",
                                  "properties": {
                                    "credentials": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "description": "Credential id"
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Credential name"
                                          },
                                          "apiKey": {
                                            "type": "string",
                                            "description": "Api key / client Id"
                                          },
                                          "integration_type": {
                                            "type": "string",
                                            "description": "Credential type, possible values (service, oauthweb, oauthandroid, oauthios)"
                                          },
                                          "jwt": {
                                            "type": "object",
                                            "description": "jwt credential details",
                                            "properties": {
                                              "client_id": {
                                                "type": "string",
                                                "description": "Client id"
                                              },
                                              "client_secret": {
                                                "type": "string",
                                                "description": "Client secret"
                                              },
                                              "technical_account_email": {
                                                "type": "string",
                                                "description": "Technical account email"
                                              },
                                              "technical_account_id": {
                                                "type": "string",
                                                "description": "Technical account id"
                                              },
                                              "meta_scopes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "description": "Credential meta scope"
                                                }
                                              }
                                            }
                                          },
                                          "oauth_server_to_server": {
                                            "type": "object",
                                            "description": "OAuth server to server credential details",
                                            "properties": {
                                              "client_id": {
                                                "type": "string",
                                                "description": "Client id"
                                              },
                                              "client_secrets": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "description": "client secrets"
                                                }
                                              },
                                              "technical_account_email": {
                                                "type": "string",
                                                "description": "Technical account email"
                                              },
                                              "technical_account_id": {
                                                "type": "string",
                                                "description": "Technical account id"
                                              },
                                              "scopes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "description": "Credential scopes"
                                                }
                                              }
                                            }
                                          },
                                          "oauth2": {
                                            "type": "object",
                                            "description": "oauth2 credential details",
                                            "properties": {
                                              "client_id": {
                                                "type": "string",
                                                "description": "Client id"
                                              },
                                              "client_secret": {
                                                "type": "string",
                                                "description": "Client secret"
                                              },
                                              "redirect_uri": {
                                                "type": "array",
                                                "description": "Redirect urls list",
                                                "items": {
                                                  "type": "string",
                                                  "description": "Redirect url"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "services": {
                                      "type": "array",
                                      "description": "Workspace services",
                                      "items": {
                                        "type": "object",
                                        "description": "Service details",
                                        "properties": {
                                          "code": {
                                            "type": "string",
                                            "description": "Service code"
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "Service name"
                                          }
                                        }
                                      }
                                    },
                                    "runtime": {
                                      "type": "object",
                                      "description": "Workspace runtime",
                                      "properties": {
                                        "namespaces": {
                                          "type": "array",
                                          "description": "Runtime namespaces",
                                          "items": {
                                            "type": "object",
                                            "description": "Runtime details",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "Namespace name"
                                              },
                                              "auth": {
                                                "type": "string",
                                                "description": "Namespace auth token"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "mesh": {
                                      "type": "object",
                                      "description": "Mesh configuration"
                                    },
                                    "events": {
                                      "type": "object",
                                      "description": "Events details",
                                      "properties": {
                                        "registrations": {
                                          "type": "array",
                                          "description": "Event registrations",
                                          "items": {
                                            "type": "object",
                                            "description": "Event registrations details",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "id"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "name"
                                              },
                                              "description": {
                                                "type": "string",
                                                "description": "registration description"
                                              },
                                              "enabled": {
                                                "type": "string",
                                                "description": "enabled"
                                              },
                                              "client_id": {
                                                "type": "string",
                                                "description": "client id"
                                              },
                                              "registration_id": {
                                                "type": "string",
                                                "description": "registration id"
                                              },
                                              "webhook_status": {
                                                "type": "string",
                                                "description": "webhook status"
                                              },
                                              "created_date": {
                                                "type": "string",
                                                "description": "create date"
                                              },
                                              "updated_date": {
                                                "type": "string",
                                                "description": "update date"
                                              },
                                              "webhook_url": {
                                                "type": "string",
                                                "description": "webhook url"
                                              },
                                              "delivery_type": {
                                                "type": "string",
                                                "description": "delivery type"
                                              },
                                              "events_url": {
                                                "type": "string",
                                                "description": "events url"
                                              },
                                              "trace_url": {
                                                "type": "string",
                                                "description": "trace url"
                                              },
                                              "events_of_interest": {
                                                "type": "array",
                                                "description": "events of interested",
                                                "items": {
                                                  "type": "object",
                                                  "description": "events of interested details",
                                                  "properties": {
                                                    "event_code": {
                                                      "type": "string",
                                                      "description": "event code"
                                                    },
                                                    "provider_id": {
                                                      "type": "string",
                                                      "description": "provider id"
                                                    },
                                                    "event_label": {
                                                      "type": "string",
                                                      "description": "event label"
                                                    },
                                                    "event_description": {
                                                      "type": "string",
                                                      "description": "event description"
                                                    },
                                                    "provider_label": {
                                                      "type": "string",
                                                      "description": "provider label"
                                                    },
                                                    "event_delivery_format": {
                                                      "type": "string",
                                                      "description": "event delivery format"
                                                    },
                                                    "provider_metadata": {
                                                      "type": "string",
                                                      "description": "provider metadata"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Export workspace error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/xp/{xpId}": {
      "get": {
        "summary": "Get all available extension points",
        "tags": [
          "Extensions"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "xpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "serviceCode": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    },
                    "idVer": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "specVersion": {
                      "type": "string"
                    },
                    "operations": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "ficodes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "state": {
                      "type": "string"
                    },
                    "publisherId": {
                      "type": "string"
                    },
                    "lifecycle": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "object",
                          "properties": {
                            "by": {
                              "type": "object",
                              "properties": {
                                "guid": {
                                  "type": "string"
                                }
                              }
                            },
                            "notes": {
                              "type": "string"
                            },
                            "on": {
                              "type": "string"
                            }
                          }
                        },
                        "lastModified": {
                          "type": "object",
                          "properties": {
                            "by": {
                              "type": "object",
                              "properties": {
                                "guid": {
                                  "type": "string"
                                }
                              }
                            },
                            "notes": {
                              "type": "string"
                            },
                            "on": {
                              "type": "string"
                            }
                          }
                        },
                        "submitted": {
                          "type": "object",
                          "properties": {
                            "by": {
                              "type": "object",
                              "properties": {
                                "guid": {
                                  "type": "string"
                                }
                              }
                            },
                            "notes": {
                              "type": "string"
                            },
                            "on": {
                              "type": "string"
                            }
                          }
                        },
                        "published": {
                          "type": "object",
                          "properties": {
                            "by": {
                              "type": "object",
                              "properties": {
                                "guid": {
                                  "type": "string"
                                }
                              }
                            },
                            "notes": {
                              "type": "string"
                            },
                            "on": {
                              "type": "string"
                            }
                          }
                        },
                        "reviewed": {
                          "type": "object",
                          "properties": {
                            "by": {
                              "type": "object",
                              "properties": {
                                "guid": {
                                  "type": "string"
                                }
                              }
                            },
                            "notes": {
                              "type": "string"
                            },
                            "on": {
                              "type": "string"
                            }
                          }
                        },
                        "unpublished": {
                          "type": "object",
                          "properties": {
                            "by": {
                              "type": "object",
                              "properties": {
                                "guid": {
                                  "type": "string"
                                }
                              }
                            },
                            "notes": {
                              "type": "string"
                            },
                            "on": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Extension Point Id was not found"
          },
          "405": {
            "description": "Invalid Input"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/xp/%7BxpId%7D?offset=SOME_STRING_VALUE&pageSize=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/xp/%7BxpId%7D';\n\nlet options = {\n  method: 'GET',\n  qs: {offset: 'SOME_STRING_VALUE', pageSize: 'SOME_STRING_VALUE'},\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/xp/%7BxpId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'offset' => 'SOME_STRING_VALUE',\n  'pageSize' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/xp/%7BxpId%7D?offset=SOME_STRING_VALUE&pageSize=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/xp/%7BxpId%7D?offset=SOME_STRING_VALUE&pageSize=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/xp/%7BxpId%7D?offset=SOME_STRING_VALUE&pageSize=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/xp/%7BxpId%7D?offset=SOME_STRING_VALUE&pageSize=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/xp/%7BxpId%7D?offset=SOME_STRING_VALUE&pageSize=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/policy/{intId}": {
      "get": {
        "summary": "get Application Policy",
        "tags": [
          "AtlasPolicyEngine"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "AMS Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "Integration ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orgCode": {
                      "type": "string",
                      "description": "IMS org id"
                    },
                    "appCode": {
                      "type": "string",
                      "description": "AMS application id"
                    },
                    "appPolicyCode": {
                      "type": "string"
                    },
                    "apiKey": {
                      "type": "string"
                    },
                    "quotaPolicyCode": {
                      "type": "string"
                    },
                    "planCode": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "_links": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "deprecation": {
                            "type": "string"
                          },
                          "href": {
                            "type": "string"
                          },
                          "hreflang": {
                            "type": "string"
                          },
                          "media": {
                            "type": "string"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "templated": {
                            "type": "boolean"
                          },
                          "title": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D';\n\nlet options = {\n  method: 'GET',\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/policy/%7BintId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/policy/{intId}/{sdkCode}/usage": {
      "get": {
        "summary": "get Quota Usage",
        "tags": [
          "AtlasPolicyEngine"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "AMS Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "Integration ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sdkCode",
            "description": "AMS sdk code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policyCode": {
                      "type": "string"
                    },
                    "planCode": {
                      "type": "string"
                    },
                    "orgCode": {
                      "type": "string"
                    },
                    "refreshCycle": {
                      "type": "string"
                    },
                    "policyType": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "availableQuantity": {
                      "type": "integer"
                    },
                    "consumedQuantity": {
                      "type": "integer"
                    },
                    "selectors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "selector": {
                            "type": "string"
                          },
                          "consumedQuantity": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/%7BsdkCode%7D/usage \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/%7BsdkCode%7D/usage';\n\nlet options = {\n  method: 'GET',\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/%7BsdkCode%7D/usage');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/%7BsdkCode%7D/usage\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/%7BsdkCode%7D/usage\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/policy/%7BintId%7D/%7BsdkCode%7D/usage\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/%7BsdkCode%7D/usage\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/%7BsdkCode%7D/usage\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/policy/{intId}/usage": {
      "get": {
        "summary": "get Quota Usage using sdkCode as query parameter",
        "tags": [
          "AtlasPolicyEngine"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "AMS Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "Integration ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sdkCode",
            "description": "AMS sdk code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policyCode": {
                      "type": "string"
                    },
                    "planCode": {
                      "type": "string"
                    },
                    "orgCode": {
                      "type": "string"
                    },
                    "refreshCycle": {
                      "type": "string"
                    },
                    "policyType": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "availableQuantity": {
                      "type": "integer"
                    },
                    "consumedQuantity": {
                      "type": "integer"
                    },
                    "selectors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "selector": {
                            "type": "string"
                          },
                          "consumedQuantity": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/usage?sdkCode=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/usage';\n\nlet options = {\n  method: 'GET',\n  qs: {sdkCode: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/usage');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'sdkCode' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/usage?sdkCode=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/usage?sdkCode=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/policy/%7BintId%7D/usage?sdkCode=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/usage?sdkCode=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/policy/%7BintId%7D/usage?sdkCode=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/clients/{clientId}/credential": {
      "get": {
        "summary": "Get Credential details by client id",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "description": "Credential Client ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "org_id": {
                      "type": "string"
                    },
                    "org_code": {
                      "type": "string"
                    },
                    "project_id": {
                      "type": "string"
                    },
                    "workspace_id": {
                      "type": "string"
                    },
                    "credential_id": {
                      "type": "string"
                    },
                    "client_id": {
                      "type": "string"
                    },
                    "flow_type": {
                      "type": "string"
                    },
                    "credential_type": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "adobeid.domain": {
                          "type": "string"
                        }
                      }
                    },
                    "services": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/clients/%7BclientId%7D/credential \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/clients/%7BclientId%7D/credential';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/clients/%7BclientId%7D/credential');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/clients/%7BclientId%7D/credential\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/clients/%7BclientId%7D/credential\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/clients/%7BclientId%7D/credential\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/clients/%7BclientId%7D/credential\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/clients/%7BclientId%7D/credential\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/data/org-namespace-mappings": {
      "post": {
        "summary": "Builds and returns mapping between provided namespaces and ims org id",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Service token",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get mappings success"
          },
          "400": {
            "description": "Namespaces form is empty"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/data/org-namespace-mappings \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/data/org-namespace-mappings';\n\nlet options = {\n  method: 'POST',\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/data/org-namespace-mappings');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/data/org-namespace-mappings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/data/org-namespace-mappings\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/data/org-namespace-mappings\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/data/org-namespace-mappings\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/data/org-namespace-mappings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/data/services/{serviceCode}/organizations": {
      "get": {
        "summary": "Returns the list of organizations subscribed to the given serviceCode",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Service token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceCode",
            "description": "Service code of the I/O API/SDK",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "The page number starting with page 0 (default)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "The page size, default to 100, maximum 1000",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "page_size": {
                      "type": "integer"
                    },
                    "count": {
                      "type": "integer"
                    },
                    "total": {
                      "type": "integer"
                    },
                    "organizations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "org_id": {
                            "type": "integer"
                          },
                          "org_code": {
                            "type": "string"
                          },
                          "total_client_ids": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/organizations?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/organizations';\n\nlet options = {\n  method: 'GET',\n  qs: {page: 'SOME_STRING_VALUE', size: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/organizations');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'page' => 'SOME_STRING_VALUE',\n  'size' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/organizations?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/organizations?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/data/services/%7BserviceCode%7D/organizations?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/organizations?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/organizations?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/data/services/{serviceCode}/clients": {
      "get": {
        "summary": "Returns the list of IMS clients subscribed to the given serviceCode",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Service token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceCode",
            "description": "Service code of the I/O API/SDK",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "The page number starting with page 0 (default)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "The page size, default to 100, maximum 1000",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "org_ids",
            "description": "An optional comma-separated list of AMS consumer ids to restrict the request, maximum 10 ids.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "description": "The current page being returned"
                    },
                    "page_size": {
                      "type": "integer",
                      "description": "The page size that has been requested"
                    },
                    "count": {
                      "type": "integer",
                      "description": "The number of clients returned in this page"
                    },
                    "total": {
                      "type": "integer",
                      "description": "The total number of clients in the entire dataset"
                    },
                    "clients": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "org_id": {
                            "type": "string",
                            "description": "The AMS consumer org id"
                          },
                          "org_code": {
                            "type": "string",
                            "description": "The IMS org id"
                          },
                          "client_id": {
                            "type": "string",
                            "description": "The IMS client id"
                          },
                          "project_id": {
                            "type": "string",
                            "description": "The Developer Console project id"
                          },
                          "workspace_id": {
                            "type": "string",
                            "description": "The Developer Console workspace id"
                          },
                          "credential_id": {
                            "type": "string",
                            "description": "The credential id"
                          },
                          "notifications_enabled": {
                            "type": "boolean",
                            "description": "Whether email notifications are enabled or not for the project"
                          },
                          "flow_type": {
                            "type": "string",
                            "description": "One of adobeid, entp or analytics"
                          },
                          "credential_type": {
                            "type": "string",
                            "description": "The credential type like service, oauth, apikey, etc"
                          },
                          "metadata": {
                            "type": "object",
                            "description": "An optional map of metadata, will not be present if all the key-value pairs are null or empty",
                            "properties": {
                              "adobeid.domain": {
                                "type": "string",
                                "description": "An optional list of allowed domains (comma-separated)"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/clients?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE&org_ids=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/clients';\n\nlet options = {\n  method: 'GET',\n  qs: {\n    page: 'SOME_STRING_VALUE',\n    size: 'SOME_STRING_VALUE',\n    org_ids: 'SOME_STRING_VALUE'\n  },\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/clients');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'page' => 'SOME_STRING_VALUE',\n  'size' => 'SOME_STRING_VALUE',\n  'org_ids' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/clients?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE&org_ids=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/clients?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE&org_ids=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/data/services/%7BserviceCode%7D/clients?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE&org_ids=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/clients?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE&org_ids=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/data/services/%7BserviceCode%7D/clients?page=SOME_STRING_VALUE&size=SOME_STRING_VALUE&org_ids=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/entp": {
      "post": {
        "summary": "create entp integration",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "integration name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "certificate": {
                    "description": "form data",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "certificate"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "apiKey": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "technicalAccountId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp?name=SOME_STRING_VALUE&description=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: multipart/form-data' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp';\n\nlet options = {\n  method: 'POST',\n  qs: {name: 'SOME_STRING_VALUE', description: 'SOME_STRING_VALUE'},\n  headers: {\n    accept: 'multipart/form-data',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setQueryData([\n  'name' => 'SOME_STRING_VALUE',\n  'description' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'accept' => 'multipart/form-data',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp?name=SOME_STRING_VALUE&description=SOME_STRING_VALUE\")\n  .header(\"accept\", \"multipart/form-data\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp?name=SOME_STRING_VALUE&description=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"accept\", \"multipart/form-data\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'accept': \"multipart/form-data\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/integrations/entp?name=SOME_STRING_VALUE&description=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp?name=SOME_STRING_VALUE&description=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"multipart/form-data\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp?name=SOME_STRING_VALUE&description=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'multipart/form-data'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/entp/{intId}/bindings": {
      "post": {
        "summary": "upload and bind certificate",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "integration id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "certificate": {
                    "description": "certificate",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "certificate"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "bindingId": {
                        "type": "string"
                      },
                      "orgId": {
                        "type": "string"
                      },
                      "technicalAccountId": {
                        "type": "string"
                      },
                      "certificateFingerprint": {
                        "type": "string"
                      },
                      "notAfter": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: multipart/form-data' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    accept: 'multipart/form-data',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'accept' => 'multipart/form-data',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings\")\n  .header(\"accept\", \"multipart/form-data\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"accept\", \"multipart/form-data\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'accept': \"multipart/form-data\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"multipart/form-data\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'multipart/form-data'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "get": {
        "summary": "list integration bindings",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "integration id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "bindingId": {
                        "type": "string"
                      },
                      "orgId": {
                        "type": "string"
                      },
                      "technicalAccountId": {
                        "type": "string"
                      },
                      "certificateFingerprint": {
                        "type": "string"
                      },
                      "notAfter": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/entp/{intId}/service/{sdkCode}/properties": {
      "get": {
        "summary": "list of credential sdk properties",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "Credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sdkCode",
            "description": "Sdk code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sdkCode": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "sdkList": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "code": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "licenseConfigs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "productId": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "selected": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service/%7BsdkCode%7D/properties \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service/%7BsdkCode%7D/properties';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service/%7BsdkCode%7D/properties');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service/%7BsdkCode%7D/properties\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service/%7BsdkCode%7D/properties\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service/%7BsdkCode%7D/properties\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service/%7BsdkCode%7D/properties\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service/%7BsdkCode%7D/properties\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/entp/{intId}/bindings/{bindingId}": {
      "delete": {
        "summary": "delete binding",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "integration id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bindingId",
            "description": "IMS binding id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings/%7BbindingId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings/%7BbindingId%7D';\n\nlet options = {\n  method: 'DELETE',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings/%7BbindingId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings/%7BbindingId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings/%7BbindingId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings/%7BbindingId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings/%7BbindingId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/bindings/%7BbindingId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/entp/{intId}/services": {
      "put": {
        "summary": "subscribe entp integration to services",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "integration id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Subscriptionlist"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sdkList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "errorList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PUT \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/services \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '[{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}]'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/services';\n\nlet options = {\n  method: 'PUT',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '[{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}]'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/services');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('[{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}]');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.put(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/services\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/services\"\n\n\tpayload := strings.NewReader(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/services\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/services\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/services\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/entp/{intId}/service": {
      "post": {
        "summary": "subscribe entp integration to service",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "integration id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubscribeItem"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sdkList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "errorList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service\"\n\n\tpayload := strings.NewReader(\"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/%7BintId%7D/service\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/entp/masterTechnicalAccount": {
      "post": {
        "summary": "create master technical account",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "certificate": {
                    "description": "public certificate",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "certificate"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orgCode": {
                      "type": "string"
                    },
                    "technicalAccountId": {
                      "type": "string"
                    },
                    "metaScopes": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/masterTechnicalAccount \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: multipart/form-data' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/masterTechnicalAccount';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    accept: 'multipart/form-data',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/masterTechnicalAccount');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'accept' => 'multipart/form-data',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/masterTechnicalAccount\")\n  .header(\"accept\", \"multipart/form-data\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/masterTechnicalAccount\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"accept\", \"multipart/form-data\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'accept': \"multipart/form-data\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/integrations/entp/masterTechnicalAccount\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/masterTechnicalAccount\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"multipart/form-data\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/entp/masterTechnicalAccount\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'multipart/form-data'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/services/ims/organizations/{orgId}/terms": {
      "get": {
        "summary": "check developer terms acceptance",
        "tags": [
          "DevTerms"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id or IMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Developer Terms Check Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accepted": {
                      "type": "boolean",
                      "description": "True if the user accepted the Developer Terms (but not necessarily the latest version). Both the 'accepted' and 'current' properties MUST be true to indicate that the user has accepted the latest/current version of the Developer Terms"
                    },
                    "current": {
                      "type": "boolean",
                      "description": "True if the user accepted the latest/current version of the Developer Terms. If false, the user has not accepted the latest/current version and will not be granted access to Developer Console"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/services/ims/organizations/%7BorgId%7D/terms\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "summary": "accept developer terms",
        "tags": [
          "DevTerms"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id or IMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Developer Terms Acceptance Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accepted": {
                      "type": "boolean",
                      "description": "True if the user successfully accepted the latest version of the Developer Terms."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/services/ims/organizations/%7BorgId%7D/terms\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/services/ims/organizations/%7BorgId%7D/terms\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/services/ims/terms": {
      "get": {
        "summary": "get developer terms",
        "tags": [
          "DevTerms"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Developer Terms Text",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tc": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Text of Developer Terms"
                          },
                          "locale": {
                            "type": "string",
                            "description": "Language of the Developer Terms text"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/services/ims/terms \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/services/ims/terms';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/services/ims/terms');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/services/ims/terms\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/services/ims/terms\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/services/ims/terms\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/services/ims/terms\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/services/ims/terms\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/{intId}": {
      "get": {
        "summary": "get integration details",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "integration id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "apikey": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "eventProviders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "id": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "orgCode": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "orgName": {
                      "type": "string"
                    },
                    "platform": {
                      "type": "string"
                    },
                    "production": {
                      "type": "boolean"
                    },
                    "requestState": {
                      "type": "string",
                      "description": "enum [WAITING, APPROVED, REJECTED, RESET]"
                    },
                    "sdkList": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "sdk code"
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/integrations/%7BintId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "summary": "delete integration",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "integration id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D';\n\nlet options = {\n  method: 'DELETE',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/console/organizations/%7BorgId%7D/integrations/%7BintId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations/{intId}/secrets": {
      "get": {
        "deprecated": true,
        "summary": "get integration secrets",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intId",
            "description": "integration id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "client_id": {
                      "type": "string"
                    },
                    "client_secrets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "client_secret": {
                            "type": "string"
                          },
                          "expires_at": {
                            "type": "string"
                          },
                          "expires_at_str": {
                            "type": "string"
                          },
                          "last_used_at": {
                            "type": "string"
                          },
                          "uuid": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D/secrets \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D/secrets';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D/secrets');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D/secrets\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D/secrets\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/integrations/%7BintId%7D/secrets\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D/secrets\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations/%7BintId%7D/secrets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/credentials/{credentialId}/secrets/{secretId}": {
      "delete": {
        "summary": "Delete credential client secret by secret id",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretId",
            "description": "secret id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Credential Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets/%7BsecretId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets/%7BsecretId%7D';\n\nlet options = {\n  method: 'DELETE',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets/%7BsecretId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets/%7BsecretId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets/%7BsecretId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets/%7BsecretId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets/%7BsecretId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets/%7BsecretId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/credentials/{credentialId}/secrets": {
      "post": {
        "summary": "Add credential client secret",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "expires_at": {
                      "type": "string"
                    },
                    "expires_at_str": {
                      "type": "string"
                    },
                    "client_secret": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Credential Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "get": {
        "summary": "Get credential client secrets",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "expires_at": {
                      "type": "string"
                    },
                    "expires_at_str": {
                      "type": "string"
                    },
                    "client_secret": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Credential Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/%7BcredentialId%7D/secrets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/meshes": {
      "get": {
        "summary": "Get organization meshes",
        "tags": [
          "Meshes"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKey",
            "description": "API key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get org meshes success"
          },
          "401": {
            "description": "Unauthorized - Oauth token is not valid"
          },
          "403": {
            "description": "Forbidden - Oauth token is missing / User does not belong to organization"
          },
          "500": {
            "description": "Error retrieving meshes"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/meshes?apiKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/meshes';\n\nlet options = {\n  method: 'GET',\n  qs: {apiKey: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/meshes');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'apiKey' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/meshes?apiKey=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/meshes?apiKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/meshes?apiKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/meshes?apiKey=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/meshes?apiKey=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/meshes": {
      "post": {
        "summary": "Create mesh",
        "tags": [
          "Meshes"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKey",
            "description": "API key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Mesh"
        },
        "responses": {
          "201": {
            "description": "Create mesh success"
          },
          "400": {
            "description": "Bad Request - Invalid mesh configuration"
          },
          "401": {
            "description": "Unauthorized - Oauth token is not valid"
          },
          "403": {
            "description": "Forbidden - Oauth token is missing / User does not belong to organization"
          },
          "409": {
            "description": "Conflict - Specified meshId already exists"
          },
          "500": {
            "description": "Error creating mesh"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes?apiKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes';\n\nlet options = {\n  method: 'POST',\n  qs: {apiKey: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'},\n  body: '{}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setQueryData([\n  'apiKey' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes?apiKey=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .body(\"{}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes?apiKey=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes?apiKey=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes?apiKey=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes?apiKey=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/meshes/{meshId}": {
      "get": {
        "summary": "Get mesh",
        "tags": [
          "Meshes"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meshId",
            "description": "Mesh id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKey",
            "description": "API key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get mesh success"
          },
          "401": {
            "description": "Unauthorized - Oauth token is not valid"
          },
          "403": {
            "description": "Forbidden - Oauth token is missing / User does not belong to organization"
          },
          "404": {
            "description": "Specified mesh not found"
          },
          "500": {
            "description": "Error retrieving specified mesh"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D';\n\nlet options = {\n  method: 'GET',\n  qs: {apiKey: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'apiKey' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "put": {
        "summary": "Replace mesh",
        "tags": [
          "Meshes"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meshId",
            "description": "Mesh id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKey",
            "description": "API key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Mesh"
        },
        "responses": {
          "204": {
            "description": "Replace mesh success"
          },
          "400": {
            "description": "Bad Request - Invalid mesh configuration"
          },
          "401": {
            "description": "Unauthorized - Oauth token is not valid"
          },
          "403": {
            "description": "Forbidden - Oauth token is missing / User does not belong to organization"
          },
          "404": {
            "description": "Specified mesh not found"
          },
          "500": {
            "description": "Error replacing mesh"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PUT \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D';\n\nlet options = {\n  method: 'PUT',\n  qs: {apiKey: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'},\n  body: '{}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setQueryData([\n  'apiKey' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.put(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .body(\"{}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "summary": "Delete mesh",
        "tags": [
          "Meshes"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meshId",
            "description": "Mesh id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKey",
            "description": "API key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete mesh success"
          },
          "401": {
            "description": "Unauthorized - Oauth token is not valid"
          },
          "403": {
            "description": "Forbidden - Oauth token is missing / User does not belong to organization"
          },
          "404": {
            "description": "Specified mesh not found"
          },
          "500": {
            "description": "Error deleting mesh"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D';\n\nlet options = {\n  method: 'DELETE',\n  qs: {apiKey: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setQueryData([\n  'apiKey' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D?apiKey=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/meshes/describe": {
      "get": {
        "summary": "Describe mesh",
        "tags": [
          "Meshes"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKey",
            "description": "API key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get mesh success"
          },
          "401": {
            "description": "Unauthorized - Oauth token is not valid"
          },
          "403": {
            "description": "Forbidden - Oauth token is missing / User does not belong to organization"
          },
          "404": {
            "description": "Specified mesh not found"
          },
          "500": {
            "description": "Error retrieving specified mesh"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/describe?apiKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/describe';\n\nlet options = {\n  method: 'GET',\n  qs: {apiKey: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/describe');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'apiKey' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/describe?apiKey=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/describe?apiKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/describe?apiKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/describe?apiKey=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/describe?apiKey=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/meshes/{meshId}/sources": {
      "post": {
        "summary": "Create mesh source",
        "tags": [
          "Meshes"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meshId",
            "description": "Mesh id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKey",
            "description": "API key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Mesh"
        },
        "responses": {
          "204": {
            "description": "Create mesh sources success"
          },
          "400": {
            "description": "Bad Request - Invalid source configuration"
          },
          "401": {
            "description": "Unauthorized - Oauth token is not valid"
          },
          "403": {
            "description": "Forbidden - Oauth token is missing / User does not belong to organization"
          },
          "404": {
            "description": "Specified mesh not found"
          },
          "409": {
            "description": "Conflict - A source with the same name already exists for the specified mesh"
          },
          "500": {
            "description": "Error adding source"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources?apiKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources';\n\nlet options = {\n  method: 'POST',\n  qs: {apiKey: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'},\n  body: '{}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setQueryData([\n  'apiKey' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources?apiKey=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .body(\"{}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources?apiKey=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources?apiKey=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources?apiKey=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources?apiKey=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/meshes/{meshId}/sources/{sourceName}": {
      "delete": {
        "summary": "Delete mesh sources",
        "tags": [
          "Meshes"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meshId",
            "description": "Mesh id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceName",
            "description": "Mesh source name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKey",
            "description": "API key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete mesh sources success"
          },
          "401": {
            "description": "Unauthorized - Oauth token is not valid"
          },
          "403": {
            "description": "Forbidden - Oauth token is missing / User does not belong to organization"
          },
          "404": {
            "description": "Specified mesh not found / Source name not found on mesh"
          },
          "500": {
            "description": "Error deleting source from mesh"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources/%7BsourceName%7D?apiKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources/%7BsourceName%7D';\n\nlet options = {\n  method: 'DELETE',\n  qs: {apiKey: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', Authorization: 'SOME_STRING_VALUE'}\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources/%7BsourceName%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setQueryData([\n  'apiKey' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources/%7BsourceName%7D?apiKey=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources/%7BsourceName%7D?apiKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources/%7BsourceName%7D?apiKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources/%7BsourceName%7D?apiKey=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/meshes/%7BmeshId%7D/sources/%7BsourceName%7D?apiKey=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/credentials/oauth-server-to-server": {
      "post": {
        "summary": "Create oauth server to server credential",
        "tags": [
          "OAuth server to server"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OAuthServerToServer"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "apiKey": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "technicalAccountId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden, ERR_MSG_QUOTA_EXCEEDED"
          },
          "409": {
            "description": "Conflict, ERR_MSG_DUPLICATE_NAME"
          },
          "500": {
            "description": "Error creating oauth server to server credential"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"technicalAccountName\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"description\":\"string\",\"technicalAccountName\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'accept' => 'application/json',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"technicalAccountName\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\"\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/credentials/oauth-server-to-server/{credentialId}": {
      "put": {
        "summary": "Update oauth server to server credential",
        "tags": [
          "OAuth server to server"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "Credential ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OAuthServerToServer"
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "apikey": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "createdDate": {
                      "type": "string"
                    },
                    "lastModifiedDate": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden, ERR_MSG_QUOTA_EXCEEDED"
          },
          "409": {
            "description": "Conflict, ERR_MSG_DUPLICATE_NAME"
          },
          "500": {
            "description": "Error creating oauth server to server credential"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PUT \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"technicalAccountName\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D';\n\nlet options = {\n  method: 'PUT',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"description\":\"string\",\"technicalAccountName\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'accept' => 'application/json',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"technicalAccountName\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.put(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\"\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/credentials/oauth-server-to-server/{credentialId}/binding": {
      "post": {
        "summary": "Create oauth server to server credential binding",
        "tags": [
          "OAuth server to server"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "Credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizationId": {
                      "type": "string"
                    },
                    "clientId": {
                      "type": "string"
                    },
                    "allowedScopes": {
                      "type": "string"
                    },
                    "servicePrincipalId": {
                      "type": "string"
                    },
                    "createdByUser": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Error creating oauth server to server credential binding"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'accept' => 'application/json',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "summary": "Delete oauth server to server credential binding",
        "tags": [
          "OAuth server to server"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "Credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Error deleting oauth server to server credential binding"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding';\n\nlet options = {\n  method: 'DELETE',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'accept' => 'application/json',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "get": {
        "summary": "Get oauth server to server credential binding",
        "tags": [
          "OAuth server to server"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "Credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizationId": {
                      "type": "string"
                    },
                    "clientId": {
                      "type": "string"
                    },
                    "allowedScopes": {
                      "type": "string"
                    },
                    "servicePrincipalId": {
                      "type": "string"
                    },
                    "createdByUser": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Error getting oauth server to server credential binding"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/binding\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/credentials/oauth-server-to-server/{credentialId}/services": {
      "put": {
        "summary": "Subscribe oauth server to server credential to services",
        "tags": [
          "OAuth server to server"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "Credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Subscriptionlist"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sdkList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "errorList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PUT \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/services \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '[{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}]'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/services';\n\nlet options = {\n  method: 'PUT',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '[{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}]'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/services');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'accept' => 'application/json',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('[{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}]');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.put(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/services\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/services\"\n\n\tpayload := strings.NewReader(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\"\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/services\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/services\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/services\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/credentials/oauth-server-to-server/{credentialId}/service/subscribe": {
      "patch": {
        "summary": "Subscribe oauth server to server credential to service",
        "tags": [
          "OAuth server to server"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "Credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubscribeItem"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sdkList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "errorList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PATCH \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/subscribe \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/subscribe';\n\nlet options = {\n  method: 'PATCH',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/subscribe');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders([\n  'accept' => 'application/json',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/subscribe\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/subscribe\"\n\n\tpayload := strings.NewReader(\"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\"\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PATCH\", \"/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/subscribe\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/subscribe\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/subscribe\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/credentials/oauth-server-to-server/{credentialId}/service/unsubscribe": {
      "patch": {
        "summary": "Unsubscribe oauth server to server credential from service",
        "tags": [
          "OAuth server to server"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "Credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubscribeItem"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sdkList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "errorList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PATCH \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/unsubscribe \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/unsubscribe';\n\nlet options = {\n  method: 'PATCH',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/unsubscribe');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders([\n  'accept' => 'application/json',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"id\":\"string\",\"name\":\"string\",\"productId\":\"string\",\"description\":\"string\",\"selected\":true}],\"roles\":[{\"id\":\"string\",\"code\":\"string\",\"name\":\"string\"}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/unsubscribe\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/unsubscribe\"\n\n\tpayload := strings.NewReader(\"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\"\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PATCH\", \"/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/unsubscribe\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/unsubscribe\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/service/unsubscribe\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"productId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"selected\\\":true}],\\\"roles\\\":[{\\\"id\\\":\\\"string\\\",\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/credentials/oauth-server-to-server/{credentialId}/status": {
      "get": {
        "summary": "Get oauth server to server credential migration status",
        "tags": [
          "OAuth server to server"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "Credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "migrationStatus": {
                      "type": "string",
                      "enum": [
                        "NOT_STARTED",
                        "STARTED",
                        "COMPLETED",
                        "NONE"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/status \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/status';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/status');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/status\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/status\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/status\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/status\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/status\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/credentials/oauth-server-to-server/{credentialId}/finalize": {
      "patch": {
        "summary": "The API finishes migration from JWT to oauth server to server credential",
        "tags": [
          "OAuth server to server"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "Credential id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PATCH \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/finalize \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/finalize';\n\nlet options = {\n  method: 'PATCH',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/finalize');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders([\n  'accept' => 'application/json',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/finalize\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/finalize\"\n\n\treq, _ := http.NewRequest(\"PATCH\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PATCH\", \"/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/finalize\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/finalize\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/credentials/oauth-server-to-server/%7BcredentialId%7D/finalize\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations": {
      "get": {
        "summary": "list organizations",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "AMS org code (IMS org id - if applicable)"
                      },
                      "description": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string",
                        "description": "AMS org id"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "org type"
                      },
                      "role": {
                        "type": "string",
                        "description": "the user role in that org, ADMIN or DEVELOPER"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/integrations": {
      "get": {
        "summary": "list integrations for an organization",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "page index",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "pages": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "total": {
                      "type": "integer"
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "apikey": {
                            "type": "string"
                          },
                          "createdDate": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string",
                            "description": "integration id"
                          },
                          "lastModified": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "orgId": {
                            "type": "string",
                            "description": "AMS org id"
                          },
                          "production": {
                            "type": "boolean"
                          },
                          "sdkList": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "sdk code"
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "enum [ENABLED, DISABLED]"
                          },
                          "type": {
                            "type": "string",
                            "description": "enum [adobeid, entp, internal]"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations';\n\nlet options = {\n  method: 'GET',\n  qs: {page: 'SOME_INTEGER_VALUE', size: 'SOME_INTEGER_VALUE'},\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'page' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/integrations?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/integrations?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/services": {
      "get": {
        "summary": "list services for an organization",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "code": {
                        "type": "string"
                      },
                      "enabled": {
                        "type": "boolean"
                      },
                      "type": {
                        "type": "string"
                      },
                      "platformList": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "docsUrl": {
                        "type": "string"
                      },
                      "learnMoreUrl": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "properties": {
                        "type": "object",
                        "properties": {
                          "licenseConfigs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "productId": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "requiresApproval": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/services\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/recipients": {
      "get": {
        "summary": "Returns the list of users that receive email notifications",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user_id": {
                        "type": "string",
                        "description": "the IMS user id"
                      },
                      "email": {
                        "type": "string"
                      },
                      "firstname": {
                        "type": "boolean"
                      },
                      "lastname": {
                        "type": "string"
                      },
                      "role": {
                        "type": "string",
                        "description": "the role of the user in the org, either ORG_ADMIN, LICENSE_DEV_ADMIN or TEAM_MEMBER"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/recipients \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/recipients';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/recipients');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/recipients\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/recipients\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/recipients\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/recipients\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/recipients\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/project-plugin": {
      "post": {
        "summary": "Creates project and plugin",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "pluginId",
                  "hostApp",
                  "appType"
                ],
                "properties": {
                  "pluginId": {
                    "type": "string"
                  },
                  "hostApp": {
                    "type": "string"
                  },
                  "appType": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "description": "Plugin info",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create project and plugin success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pluginId": {
                      "type": "string",
                      "description": "Plugin id"
                    },
                    "projectId": {
                      "type": "string",
                      "description": "Project id"
                    },
                    "workspaceId": {
                      "type": "string",
                      "description": "Workspace id"
                    },
                    "projectTitle": {
                      "type": "string",
                      "description": "Project title"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Plugin already exists in org (To avoid generating multiple projects for plugin we assume pluginId must be unique per org)"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/project-plugin \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"pluginId\":\"string\",\"hostApp\":\"string\",\"appType\":\"string\",\"workspaceId\":0}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/project-plugin';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"pluginId\":\"string\",\"hostApp\":\"string\",\"appType\":\"string\",\"workspaceId\":0}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/project-plugin');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"pluginId\":\"string\",\"hostApp\":\"string\",\"appType\":\"string\",\"workspaceId\":0}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/project-plugin\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"pluginId\\\":\\\"string\\\",\\\"hostApp\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\",\\\"workspaceId\\\":0}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/project-plugin\"\n\n\tpayload := strings.NewReader(\"{\\\"pluginId\\\":\\\"string\\\",\\\"hostApp\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\",\\\"workspaceId\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"pluginId\\\":\\\"string\\\",\\\"hostApp\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\",\\\"workspaceId\\\":0}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/project-plugin\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/project-plugin\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"pluginId\\\":\\\"string\\\",\\\"hostApp\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\",\\\"workspaceId\\\":0}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/project-plugin\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"pluginId\\\":\\\"string\\\",\\\"hostApp\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\",\\\"workspaceId\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/master-service-principals-account": {
      "post": {
        "summary": "Creates master technical service principal account",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Create master technical account response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orgCode": {
                      "type": "string",
                      "description": "IMS organization code"
                    },
                    "technicalAccountId": {
                      "type": "string",
                      "description": "Master technical account"
                    },
                    "scopes": {
                      "type": "string",
                      "description": "List of real scopes assigned to service principal binding"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/master-service-principals-account \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/master-service-principals-account';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/master-service-principals-account');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/master-service-principals-account\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/master-service-principals-account\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/master-service-principals-account\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/master-service-principals-account\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/master-service-principals-account\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects": {
      "get": {
        "summary": "List Projects",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortField",
            "description": "Order By Field. Allowed values [date_last_modified, date_created, title]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "description": "Sort Order. Allowed values [DESC, ASC]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Page Size. If no value specified, default value of 100 will be used only if a value for page parameter is specified",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "description": "Page Number. Page Number starts at 1. If no value is specified, all records will be returned",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "title",
            "description": "If this field is included, only projects with exactly matching title will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appType",
            "description": "Plugin/application type ?appType=UXP,ZXP",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appSubType",
            "description": "Plugin/application sub type/hostApp ?appSubType=SPRK,PHSP",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIds",
            "description": "Projects ids we want to filter ?projectIds=1,2,3",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found projects",
            "headers": {
              "X-Pagination-Count": {
                "description": "Total number of matching records",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Pagination-Page": {
                "description": "Current page number",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Pagination-Size": {
                "description": "Page size",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Project id"
                      },
                      "name": {
                        "type": "string",
                        "description": "Project name"
                      },
                      "description": {
                        "type": "string",
                        "description": "Project description"
                      },
                      "type": {
                        "type": "string",
                        "description": "Project type"
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "Is project enabled"
                      },
                      "deleted": {
                        "type": "boolean",
                        "description": "Is project deleted"
                      },
                      "title": {
                        "type": "string",
                        "description": "Project title"
                      },
                      "org_id": {
                        "type": "string",
                        "description": "Org id"
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date",
                        "description": "Project create date"
                      },
                      "date_last_modified": {
                        "type": "string",
                        "format": "date",
                        "description": "Project last modify date"
                      },
                      "who_created": {
                        "type": "string",
                        "description": "Created by"
                      },
                      "who_last_modified": {
                        "type": "string",
                        "description": "Last modified by"
                      },
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "workspaces": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Workspace id"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Workspace name"
                                },
                                "runtime": {
                                  "type": "string",
                                  "description": "Runtime namespace"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The following errors are possible - sortField must be one of date_last_modified, date_created, title; sortOrder must be one of ASC DESC; size must be a positive integer; page must be a positive integer"
          },
          "500": {
            "description": "Error getting projects"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects?sortField=SOME_STRING_VALUE&sortOrder=SOME_STRING_VALUE&size=SOME_NUMBER_VALUE&page=SOME_NUMBER_VALUE&title=SOME_STRING_VALUE&appType=SOME_STRING_VALUE&appSubType=SOME_STRING_VALUE&projectIds=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects';\n\nlet options = {\n  method: 'GET',\n  qs: {\n    sortField: 'SOME_STRING_VALUE',\n    sortOrder: 'SOME_STRING_VALUE',\n    size: 'SOME_NUMBER_VALUE',\n    page: 'SOME_NUMBER_VALUE',\n    title: 'SOME_STRING_VALUE',\n    appType: 'SOME_STRING_VALUE',\n    appSubType: 'SOME_STRING_VALUE',\n    projectIds: 'SOME_STRING_VALUE'\n  },\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'sortField' => 'SOME_STRING_VALUE',\n  'sortOrder' => 'SOME_STRING_VALUE',\n  'size' => 'SOME_NUMBER_VALUE',\n  'page' => 'SOME_NUMBER_VALUE',\n  'title' => 'SOME_STRING_VALUE',\n  'appType' => 'SOME_STRING_VALUE',\n  'appSubType' => 'SOME_STRING_VALUE',\n  'projectIds' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects?sortField=SOME_STRING_VALUE&sortOrder=SOME_STRING_VALUE&size=SOME_NUMBER_VALUE&page=SOME_NUMBER_VALUE&title=SOME_STRING_VALUE&appType=SOME_STRING_VALUE&appSubType=SOME_STRING_VALUE&projectIds=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects?sortField=SOME_STRING_VALUE&sortOrder=SOME_STRING_VALUE&size=SOME_NUMBER_VALUE&page=SOME_NUMBER_VALUE&title=SOME_STRING_VALUE&appType=SOME_STRING_VALUE&appSubType=SOME_STRING_VALUE&projectIds=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects?sortField=SOME_STRING_VALUE&sortOrder=SOME_STRING_VALUE&size=SOME_NUMBER_VALUE&page=SOME_NUMBER_VALUE&title=SOME_STRING_VALUE&appType=SOME_STRING_VALUE&appSubType=SOME_STRING_VALUE&projectIds=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects?sortField=SOME_STRING_VALUE&sortOrder=SOME_STRING_VALUE&size=SOME_NUMBER_VALUE&page=SOME_NUMBER_VALUE&title=SOME_STRING_VALUE&appType=SOME_STRING_VALUE&appSubType=SOME_STRING_VALUE&projectIds=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects?sortField=SOME_STRING_VALUE&sortOrder=SOME_STRING_VALUE&size=SOME_NUMBER_VALUE&page=SOME_NUMBER_VALUE&title=SOME_STRING_VALUE&appType=SOME_STRING_VALUE&appSubType=SOME_STRING_VALUE&projectIds=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "summary": "Create project",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "title",
                  "type"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "who_created": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "New project info",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create project success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectId": {
                      "type": "string",
                      "description": "Project id"
                    },
                    "projectType": {
                      "type": "string",
                      "description": "Project type"
                    },
                    "workspaceId": {
                      "type": "string",
                      "description": "Workspace id"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces": {
      "post": {
        "summary": "Create workspace",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "New workspace info",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create workspace success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectId": {
                      "type": "string",
                      "description": "Project id"
                    },
                    "workspaceId": {
                      "type": "string",
                      "description": "Workspace id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error creating workspace"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "get": {
        "summary": "List Workspaces",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspaces for project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Workspace id"
                      },
                      "name": {
                        "type": "string",
                        "description": "Workspace name"
                      },
                      "title": {
                        "type": "string",
                        "description": "Workspace title"
                      },
                      "description": {
                        "type": "string",
                        "description": "Workspace description"
                      },
                      "quota_usage": {
                        "type": "string",
                        "description": "Quota usage for workspace"
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "Is project enabled"
                      },
                      "runtime_enabled": {
                        "type": "boolean",
                        "description": "Is runtime enabled"
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date",
                        "description": "Workspace create date"
                      },
                      "date_last_modified": {
                        "type": "string",
                        "format": "date",
                        "description": "Workspace last modify date"
                      },
                      "who_created": {
                        "type": "string",
                        "description": "Created by"
                      },
                      "who_last_modified": {
                        "type": "string",
                        "description": "Last modified by"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error returning workspaces for project"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/plugins": {
      "post": {
        "summary": "Create plugin in project",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "pluginId",
                  "hostApp",
                  "appType"
                ],
                "properties": {
                  "pluginId": {
                    "type": "string"
                  },
                  "hostApp": {
                    "type": "string"
                  },
                  "appType": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "Plugin info",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create project plugin success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pluginId": {
                      "type": "string",
                      "description": "Plugin id"
                    },
                    "projectId": {
                      "type": "string",
                      "description": "Project id"
                    },
                    "workspaceId": {
                      "type": "string",
                      "description": "Workspace id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error creating project plugin"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/plugins \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"pluginId\":\"string\",\"hostApp\":\"string\",\"appType\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/plugins';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"pluginId\":\"string\",\"hostApp\":\"string\",\"appType\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/plugins');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"pluginId\":\"string\",\"hostApp\":\"string\",\"appType\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/plugins\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"pluginId\\\":\\\"string\\\",\\\"hostApp\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/plugins\"\n\n\tpayload := strings.NewReader(\"{\\\"pluginId\\\":\\\"string\\\",\\\"hostApp\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"pluginId\\\":\\\"string\\\",\\\"hostApp\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/plugins\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/plugins\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"pluginId\\\":\\\"string\\\",\\\"hostApp\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/plugins\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"pluginId\\\":\\\"string\\\",\\\"hostApp\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}": {
      "delete": {
        "summary": "Delete Project",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete project success"
          },
          "500": {
            "description": "Error deleting project"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D';\n\nlet options = {\n  method: 'DELETE',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "patch": {
        "summary": "Edit Project",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "notifications_enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "description": "New project info, the (name AND title) OR (notifications_enabled) properties MUST be set."
        },
        "responses": {
          "200": {
            "description": "Edit project success"
          },
          "500": {
            "description": "Error editing project"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PATCH \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\",\"notifications_enabled\":true}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D';\n\nlet options = {\n  method: 'PATCH',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\",\"notifications_enabled\":true}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\",\"notifications_enabled\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"notifications_enabled\\\":true}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"notifications_enabled\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"notifications_enabled\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PATCH\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"notifications_enabled\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"notifications_enabled\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "get": {
        "summary": "Get project by ID",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Project id"
                    },
                    "name": {
                      "type": "string",
                      "description": "Project name"
                    },
                    "description": {
                      "type": "string",
                      "description": "Project description"
                    },
                    "type": {
                      "type": "string",
                      "description": "Project type"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Is project enabled"
                    },
                    "deleted": {
                      "type": "boolean",
                      "description": "Is project deleted"
                    },
                    "title": {
                      "type": "string",
                      "description": "Project title"
                    },
                    "org_id": {
                      "type": "string",
                      "description": "Org id"
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date",
                      "description": "Project create date"
                    },
                    "date_last_modified": {
                      "type": "string",
                      "format": "date",
                      "description": "Project last modify date"
                    },
                    "who_created": {
                      "type": "string",
                      "description": "Created by"
                    },
                    "who_last_modified": {
                      "type": "string",
                      "description": "Last modified by"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error getting project"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/can-delete": {
      "post": {
        "summary": "Checks if project can be deleted",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "description": "AMS org id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Api call succeeds. In case deletion is not allowed - the response will contain errors list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "workspaceId": {
                            "type": "string"
                          },
                          "resourceUrls": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/can-delete?workspaceId=SOME_STRING_VALUE' \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/can-delete';\n\nlet options = {\n  method: 'POST',\n  qs: {workspaceId: 'SOME_STRING_VALUE'},\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/can-delete');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setQueryData([\n  'workspaceId' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/can-delete?workspaceId=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/can-delete?workspaceId=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/can-delete?workspaceId=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/can-delete?workspaceId=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/can-delete?workspaceId=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/namespace": {
      "post": {
        "summary": "Create runtime namespace",
        "tags": [
          "runtime"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Create runtime namespace success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Namespace name"
                    },
                    "auth": {
                      "type": "string",
                      "description": "Auth key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error creating runtime namespace"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/namespace \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/namespace';\n\nlet options = {method: 'POST', headers: {'content-type': 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/namespace');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/namespace\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/namespace\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/namespace\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/namespace\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/namespace\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}": {
      "patch": {
        "summary": "Edit Workspace",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "whoLastModified": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "New workspace info"
        },
        "responses": {
          "200": {
            "description": "Edit workspace success"
          },
          "500": {
            "description": "Error editing workspace"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PATCH \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D';\n\nlet options = {\n  method: 'PATCH',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PATCH\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "get": {
        "summary": "Get Workspace",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found workspace",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Workspace id"
                    },
                    "name": {
                      "type": "string",
                      "description": "Workspace name"
                    },
                    "title": {
                      "type": "string",
                      "description": "Workspace title"
                    },
                    "description": {
                      "type": "string",
                      "description": "Workspace description"
                    },
                    "quota_usage": {
                      "type": "string",
                      "description": "Quota usage for workspace"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Is project enabled"
                    },
                    "runtime_enabled": {
                      "type": "boolean",
                      "description": "Is runtime enabled"
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date",
                      "description": "Workspace create date"
                    },
                    "date_last_modified": {
                      "type": "string",
                      "format": "date",
                      "description": "Workspace last modify date"
                    },
                    "who_created": {
                      "type": "string",
                      "description": "Created by"
                    },
                    "who_last_modified": {
                      "type": "string",
                      "description": "Last modified by"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error getting workspace"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "summary": "Delete a workspace",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete workspace success"
          },
          "500": {
            "description": "Error deleting workspace"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D';\n\nlet options = {\n  method: 'DELETE',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/plugins": {
      "get": {
        "summary": "Get plugins for workspace",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of plugins",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id_workspace": {
                        "type": "string",
                        "description": "Workspace id"
                      },
                      "id_plugin": {
                        "type": "string",
                        "description": "Plugin id"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error getting plugins for workspace"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials": {
      "get": {
        "summary": "Get Credentials",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id_workspace": {
                        "type": "string",
                        "description": "Workspace id"
                      },
                      "id_integration": {
                        "type": "string",
                        "description": "Credential id"
                      },
                      "flow_type": {
                        "type": "string",
                        "description": "Flow type"
                      },
                      "credential_type": {
                        "type": "string",
                        "description": "Credential type"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error getting credentials for workspace"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/entp": {
      "post": {
        "summary": "Create Enterprise Credential",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "certifiate": {
                    "description": "certificate data",
                    "type": "string",
                    "format": "binary"
                  },
                  "name": {
                    "description": "Enterprise credential name",
                    "type": "string"
                  },
                  "description": {
                    "description": "Enterprise credential description",
                    "type": "string"
                  }
                },
                "required": [
                  "certifiate",
                  "name",
                  "description"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Return enterprise credential details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Credential id"
                      },
                      "apiKey": {
                        "type": "string",
                        "description": "Credential API Key"
                      },
                      "orgId": {
                        "type": "string",
                        "description": "IMS Org ID"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error creating enterprise credential for workspace"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: multipart/form-data' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    accept: 'multipart/form-data',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'accept' => 'multipart/form-data',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\")\n  .header(\"accept\", \"multipart/form-data\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"accept\", \"multipart/form-data\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'accept': \"multipart/form-data\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"multipart/form-data\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'multipart/form-data'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/analytics": {
      "post": {
        "summary": "Create Analytics Credential",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Analytics"
              }
            }
          },
          "description": "Analytics credential object",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Return analytics credential details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Credential id"
                      },
                      "apiKey": {
                        "type": "string",
                        "description": "Credential API Key"
                      },
                      "orgId": {
                        "type": "string",
                        "description": "IMS Org ID"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error creating analytics credential for workspace"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"Web\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"Web\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"platform\":\"Web\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"Web\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"Web\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"Web\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"Web\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"Web\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/adobeId": {
      "post": {
        "summary": "Create AdobeId Credential",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Adobeid"
        },
        "responses": {
          "200": {
            "description": "Return adobeid credential details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Credential id"
                      },
                      "apiKey": {
                        "type": "string",
                        "description": "Credential API Key"
                      },
                      "orgId": {
                        "type": "string",
                        "description": "IMS Org ID"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error creating adobeId credential for workspace"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"WebApp\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"WebApp\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"platform\":\"WebApp\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"WebApp\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"WebApp\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"WebApp\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"WebApp\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"WebApp\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/{credentialType}/{credentialId}/services": {
      "put": {
        "summary": "Subscribe Credential to Services",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialType",
            "description": "Type of credential (adobeid, analytics, entp)",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "ID of credential",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeToServices"
              }
            }
          },
          "description": "SDK codes to add to credential"
        },
        "responses": {
          "200": {
            "description": "List of services credential is subscribed to",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "sdkList": {
                        "type": "string",
                        "description": "List of SDK codes associated with credential"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Credential not found"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PUT \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialType%7D/%7BcredentialId%7D/services \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '[{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}],\"roles\":[{\"id\":0,\"code\":\"string\",\"name\":\"string\"}]}]'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialType%7D/%7BcredentialId%7D/services';\n\nlet options = {\n  method: 'PUT',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '[{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}],\"roles\":[{\"id\":0,\"code\":\"string\",\"name\":\"string\"}]}]'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialType%7D/%7BcredentialId%7D/services');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('[{\"sdkCode\":\"string\",\"atlasPlanCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}],\"roles\":[{\"id\":0,\"code\":\"string\",\"name\":\"string\"}]}]');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.put(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialType%7D/%7BcredentialId%7D/services\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialType%7D/%7BcredentialId%7D/services\"\n\n\tpayload := strings.NewReader(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialType%7D/%7BcredentialId%7D/services\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialType%7D/%7BcredentialId%7D/services\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialType%7D/%7BcredentialId%7D/services\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"atlasPlanCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/endpoints": {
      "put": {
        "summary": "Update endpoints in a workspace",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "endpoints": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Endpoints added to the workspace",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "endpoints": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request PUT \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"endpoints\":{}}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints';\n\nlet options = {\n  method: 'PUT',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"endpoints\":{}}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"endpoints\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.put(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"endpoints\\\":{}}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints\"\n\n\tpayload := strings.NewReader(\"{\\\"endpoints\\\":{}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"endpoints\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"endpoints\\\":{}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"endpoints\\\":{}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "get": {
        "summary": "Get endpoints in a workspace",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoints added to the workspace",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "endpoints": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/endpoints\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects_workspaces/credentials/{credentialId}": {
      "get": {
        "summary": "Get project/workspace IDs for a credential",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "Credential ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project/workspace IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string",
                        "description": "Project id"
                      },
                      "workspaceId": {
                        "type": "string",
                        "description": "Workspace id"
                      },
                      "credentialId": {
                        "type": "string",
                        "description": "Credential id"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project/workspace not found"
          },
          "500": {
            "description": "Error retrieving workspace/project info"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/clients/{clientId}/project_workspace": {
      "get": {
        "summary": "Get project/workspace IDs for a client",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "description": "Client ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project/workspace IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectId": {
                      "type": "string",
                      "description": "Project id"
                    },
                    "workspaceId": {
                      "type": "string",
                      "description": "Workspace id"
                    },
                    "integrationId": {
                      "type": "string",
                      "description": "Integration id"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project/workspace not found"
          },
          "500": {
            "description": "Error retrieving project/workspace info"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/clients/%7BclientId%7D/project_workspace \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/clients/%7BclientId%7D/project_workspace';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/clients/%7BclientId%7D/project_workspace');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/clients/%7BclientId%7D/project_workspace\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/clients/%7BclientId%7D/project_workspace\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/clients/%7BclientId%7D/project_workspace\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/clients/%7BclientId%7D/project_workspace\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/clients/%7BclientId%7D/project_workspace\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects_workspaces/workspaces/{workspaceId}": {
      "get": {
        "summary": "Get project ID for a workspace",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string",
                        "description": "Project id"
                      },
                      "workspaceId": {
                        "type": "string",
                        "description": "Workspace id"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Error retrieving project info"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D';\n\nlet options = {\n  method: 'GET',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/entp/{credId}/certificate/generateAndAssign": {
      "post": {
        "summary": "Generate certificate key/pair for existing credential",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credId",
            "description": "Credential ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns zip file that contains public/private keys"
          },
          "500": {
            "description": "Error generating certificate key pair"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp/%7BcredId%7D/certificate/generateAndAssign \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/zip' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp/%7BcredId%7D/certificate/generateAndAssign';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/zip',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp/%7BcredId%7D/certificate/generateAndAssign');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'accept' => 'application/json',\n  'content-type' => 'application/zip',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp/%7BcredId%7D/certificate/generateAndAssign\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/zip\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp/%7BcredId%7D/certificate/generateAndAssign\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/zip\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/zip\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp/%7BcredId%7D/certificate/generateAndAssign\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp/%7BcredId%7D/certificate/generateAndAssign\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/zip\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp/%7BcredId%7D/certificate/generateAndAssign\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/zip'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/{credentialId}": {
      "delete": {
        "summary": "Delete Credential",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "description": "ID of credential",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete credentials success"
          },
          "500": {
            "description": "Error deleting credentials"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D';\n\nlet options = {\n  method: 'DELETE',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/console/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/oauth-server-to-server": {
      "post": {
        "summary": "Create oauth server to server credentials",
        "tags": [
          "workspaces"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "Org ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "description": "Workspace ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "description": "Access token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "description": "API key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthServerToServer"
              }
            }
          },
          "description": "Oauth server to server credential object",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "apiKey": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Error creating service oauth server to server credentials"
          }
        },
        "x-codeSamples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/oauth-server-to-server \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"technicalAccountName\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "const fetch = require('node-fetch');\n\nlet url = 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/oauth-server-to-server';\n\nlet options = {\n  method: 'POST',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: '{\"name\":\"string\",\"description\":\"string\",\"technicalAccountName\":\"string\"}'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/oauth-server-to-server');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'accept' => 'application/json',\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"technicalAccountName\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/oauth-server-to-server\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/oauth-server-to-server\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\"\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/oauth-server-to-server\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/oauth-server-to-server\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/oauth-server-to-server\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"technicalAccountName\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://developers-stage.adobe.io/"
    }
  ],
  "components": {
    "requestBodies": {
      "Adobeid": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Adobeid"
            }
          }
        },
        "description": "AdobeId credential object",
        "required": true
      },
      "OAuthServerToServer": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OAuthServerToServer"
            }
          }
        },
        "description": "oauth server to server credential object",
        "required": true
      },
      "SubscribeItem": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "sdkCode": {
                  "type": "string"
                },
                "atlasPlanCode": {
                  "type": "string"
                },
                "licenseConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "productId": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "selected": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "code": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "form data",
        "required": true
      },
      "Mesh": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "Subscriptionlist": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "sdkCode": {
                    "type": "string"
                  },
                  "atlasPlanCode": {
                    "type": "string"
                  },
                  "licenseConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "productId": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "selected": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "form data",
        "required": true
      }
    },
    "schemas": {
      "Adobeid": {
        "type": "object",
        "required": [
          "name",
          "description",
          "platform",
          "defaultRedirectUri"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "platform": {
            "type": "string",
            "enum": [
              "WebApp",
              "SinglePageApp",
              "NativeApp",
              "apiKey"
            ]
          },
          "urlScheme": {
            "type": "string"
          },
          "redirectUriList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultRedirectUri": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          }
        }
      },
      "Analytics": {
        "type": "object",
        "required": [
          "name",
          "description",
          "platform",
          "defaultRedirectUri"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "platform": {
            "type": "string",
            "enum": [
              "Web",
              "Android",
              "iOS"
            ]
          },
          "urlScheme": {
            "type": "string"
          },
          "redirectUriList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultRedirectUri": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          }
        }
      },
      "OAuthServerToServer": {
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "technicalAccountName": {
            "type": "string"
          }
        }
      },
      "SubscribeToServices": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "sdkCode": {
              "type": "string"
            },
            "atlasPlanCode": {
              "type": "string"
            },
            "licenseConfigs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "op": {
                    "type": "string"
                  }
                }
              }
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "code": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}