{
    "openapi": "3.0.0",
    "info": {
      "title": "Transporter API",
      "version": "1.0.0",
      "description": "This is the API layer for Adobe I/O Console."
    },
    "tags": [
      {
        "name": "projects",
        "description": "APIs for I/O Console Projects"
      },
      {
        "name": "workspaces",
        "description": "APIs for I/O Console Workspaces"
      },
      {
        "name": "AppRegistry",
        "description": "APIs for Exchange AppRegistry"
      },
      {
        "name": "Organizations",
        "description": "APIs for Organizations"
    },
    {
      "name": "AtlasPolicyEngine",
      "description": "APIs for Atlas Policy Engine"
      }
    ],
    "paths": {
      "/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/download": {
        "get": {
          "summary": "Download workspace json",
          "tags": [
            "workspaces"
          ],
          "operationId": "downloadWorkspaceJSON",
          "parameters": [
            {
              "name": "orgId",
              "description": "Org ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Download workspace json file",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "project": {
                        "type": "object",
                        "description": "Root element",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Project id"
                          },
                          "name": {
                            "type": "string",
                            "description": "Project name"
                          },
                          "title": {
                            "type": "string",
                            "description": "Project title"
                          },
                          "description": {
                            "type": "string",
                            "description": "Project description"
                          },
                          "org": {
                            "type": "object",
                            "description": "Organization info",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Organization id"
                              },
                              "name": {
                                "type": "string",
                                "description": "Organization name"
                              },
                              "ims_org_id": {
                                "type": "string",
                                "description": "Ims organization id"
                              },
                              "workspace": {
                                "type": "object",
                                "description": "Workspace info",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "Workspace id"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Workspace name"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Workspace title"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "Workspace description"
                                  },
                                  "details": {
                                    "type": "object",
                                    "description": "Workspace details",
                                    "properties": {
                                      "credentials": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "description": "Credential id"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "Credential name"
                                            },
                                            "integration_type": {
                                              "type": "string",
                                              "description": "Credential type, possible values (service, oauthweb, oauthandroid, oauthios)"
                                            },
                                            "jwt": {
                                              "type": "object",
                                              "description": "jwt credential details",
                                              "properties": {
                                                "client_id": {
                                                  "type": "string",
                                                  "description": "Client id"
                                                },
                                                "client_secret": {
                                                  "type": "string",
                                                  "description": "Client secret"
                                                },
                                                "techacct": {
                                                  "type": "string",
                                                  "description": "Technical account id"
                                                },
                                                "meta_scopes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string",
                                                    "description": "Credential meta scope"
                                                  }
                                                }
                                              }
                                            },
                                            "oauth2": {
                                              "type": "object",
                                              "description": "oauth2 credential details",
                                              "properties": {
                                                "client_id": {
                                                  "type": "string",
                                                  "description": "Client id"
                                                },
                                                "client_secret": {
                                                  "type": "string",
                                                  "description": "Client secret"
                                                },
                                                "redirect_uri": {
                                                  "type": "array",
                                                  "description": "Redirect urls list",
                                                  "items": {
                                                    "type": "string",
                                                    "description": "Redirect url"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "services": {
                                        "type": "array",
                                        "description": "Workspace services",
                                        "items": {
                                          "type": "object",
                                          "description": "Service details",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Service code"
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "Service name"
                                            }
                                          }
                                        }
                                      },
                                      "runtime": {
                                        "type": "object",
                                        "description": "Workspace runtime",
                                        "properties": {
                                          "namespaces": {
                                            "type": "array",
                                            "description": "Runtime namespaces",
                                            "items": {
                                              "type": "object",
                                              "description": "Runtime details",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "Namespace name"
                                                },
                                                "auth": {
                                                  "type": "string",
                                                  "description": "Namespace auth token"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Export workspace error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/apps/{appName}/validate": {
        "get": {
          "summary": "validate Application name",
          "tags": [
            "AppRegistry"
          ],
          "parameters": [
            {
              "name": "orgId",
              "description": "AMS Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "appName",
              "description": "Application name to be validated",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "appType",
              "description": "Application type - use JGR",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "description": "Authorization",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "type": "boolean",
              "description": "boolean true/false"
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url 'https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE' \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate',\n  qs: {appType: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'appType' => 'SOME_STRING_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
    "/organizations/{orgId}/apps/{appId}": {
      "get": {
        "summary": "get Application by Id",
          "tags": [
            "AppRegistry"
          ],
          "parameters": [
            {
              "name": "orgId",
              "description": "AMS Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
            "name": "appId",
            "description": "Application id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appType",
            "description": "Application type - use JGR for Jaeger applications",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
              "name": "Authorization",
              "description": "Authorization",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
            "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "appId": {
                        "type": "string",
                        "description": "application id"
                      },
                      "appType": {
                        "type": "string",
                        "description": "application type - use JGR for Jaeger apps"
                      },
                      "created": {
                        "type": "object",
                        "description": "activity log for application created",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "created timestamp"
                          }
                        }
                      },
                      "description": {
                        "type": "string",
                        "description": "application description"
                      },
                      "icon": {
                        "type": "string",
                        "description": "URL for the icon"
                      },
                      "images": {
                      "type": "object",
                      "properties": {
                        "featuredImage1": {
                          "type": "string"
                        },
                        "featuredImage2": {
                          "type": "string"
                        },
                        "featuredImage3": {
                          "type": "string"
                        },
                        "featuredImage4": {
                          "type": "string"
                        },
                        "featuredImage5": {
                          "type": "string"
                        }
                      }
                      },
                      "lastModified": {
                        "type": "object",
                        "description": "activity log for application last modified",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "last modified timestamp"
                          }
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "application name"
                      },
                      "reviewed": {
                        "type": "object",
                        "description": "activity log for application reviewed",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "reviewed timestamp"
                          },
                          "notes": {
                            "type": "string",
                            "description": "reviewer notes"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "application status"
                      },
                      "submitted": {
                        "type": "object",
                        "description": "activity log for application submitted",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "submitted timestamp"
                          },
                          "notes": {
                            "type": "string",
                            "description": "submitter notes"
                          }
                        }
                      },
                      "support": {
                        "type": "object",
                        "description": "support information for the application",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "contact": {
                            "type": "string"
                          },
                          "website": {
                            "type": "string"
                          }
                        }
                      },
                      "title": {
                        "type": "string"
                      },
                      "workspaces": {
                        "type": "array",
                        "description": "list of workspaces in the application",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "workspace id"
                            },
                            "name": {
                              "type": "string",
                              "description": "workspace name"
                            },
                            "endPoint": {
                              "type": "string"
                            },
                            "deepLink": {
                              "type": "string"
                            },
                            "shellProps": {
                              "type": "string"
                            },
                            "releaseNotes": {
                              "type": "string"
                            },
                            "allowlist": {
                              "type": "object",
                              "description": "list of allowlisted users & orgs",
                              "properties": {
                                "users": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "guid": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "orgs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "orgId": {
                                        "type": "string"
                                      },
                                      "orgName": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
            },
            {
              "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D',\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/apps/%7BappId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        },
      "patch": {
        "summary": "update Application",
          "tags": [
            "AppRegistry"
          ],
          "parameters": [
            {
              "name": "orgId",
              "description": "AMS Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
            "name": "appId",
            "description": "Application id",
            "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "description": "Authorization",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appId": {
                    "type": "string",
                    "description": "application id"
                  },
                  "appType": {
                    "type": "string",
                    "description": "application type - use JGR for Jaeger apps"
                  },
                  "created": {
                    "type": "object",
                    "description": "activity log for application created",
                    "properties": {
                        "type": "object",
                        "properties": {
                          "guid": {
                            "type": "string",
                            "description": "user guid"
                      },
                      "on": {
                        "type": "string",
                        "description": "created timestamp"
                      }
                    }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "application description"
                  },
                  "icon": {
                    "type": "string",
                    "description": "URL for the icon"
                  },
                  "images": {
                    "type": "object",
                    "properties": {
                      "featuredImage1": {
                        "type": "string"
                      },
                      "featuredImage2": {
                        "type": "string"
                      },
                      "featuredImage3": {
                        "type": "string"
                      },
                      "featuredImage4": {
                        "type": "string"
                      },
                      "featuredImage5": {
                        "type": "string"
                    }
                    }
                  },
                  "lastModified": {
                    "type": "object",
                    "description": "activity log for application last modified",
                    "properties": {
                      "by": {
                        "type": "object",
                        "properties": {
                          "guid": {
                            "type": "string",
                            "description": "user guid"
                          }
                        }
                      },
                      "on": {
                        "type": "string",
                        "description": "last modified timestamp"
                      }
                    }
                  },
                  "name": {
                    "type": "string",
                    "description": "application name"
                  },
                  "reviewed": {
                    "type": "object",
                    "description": "activity log for application reviewed",
                    "properties": {
                      "by": {
                        "type": "object",
                        "properties": {
                          "guid": {
                            "type": "string",
                            "description": "user guid"
                          }
                        }
                      },
                      "on": {
                        "type": "string",
                        "description": "reviewed timestamp"
                      },
                      "notes": {
                        "type": "string",
                        "description": "reviewer notes"
                      }
                    }
                  },
                  "status": {
                    "type": "string",
                    "description": "application status"
                  },
                  "submitted": {
                    "type": "object",
                    "description": "activity log for application submitted",
                    "properties": {
                      "by": {
                        "type": "object",
                        "properties": {
                          "guid": {
                            "type": "string",
                            "description": "user guid"
                          }
                        }
                      },
                      "on": {
                        "type": "string",
                        "description": "submitted timestamp"
                      },
                      "notes": {
                        "type": "string",
                        "description": "submitter notes"
                      }
                    }
                  },
                  "support": {
                    "type": "object",
                    "description": "support information for the application",
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "contact": {
                        "type": "string"
                      },
                      "website": {
                        "type": "string"
                      }
                    }
                  },
                  "title": {
                    "type": "string"
                  },
                  "workspaces": {
                    "type": "array",
                    "description": "list of workspaces in the application",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "workspace id"
                        },
                        "name": {
                          "type": "string",
                          "description": "workspace name"
                        },
                        "endPoint": {
                          "type": "string"
                        },
                        "deepLink": {
                          "type": "string"
                        },
                        "shellProps": {
                          "type": "string"
                        },
                        "releaseNotes": {
                          "type": "string"
                        },
                        "allowlist": {
                          "type": "object",
                          "description": "list of allowlisted users & orgs",
                          "properties": {
                            "users": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "guid": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "orgs": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "orgId": {
                                    "type": "string"
                                  },
                                  "orgName": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "description": "Application"
            },
          "responses": {
            "200": {
            "description": "Application Updated Successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "appId": {
                        "type": "string",
                        "description": "application id"
                      },
                      "appType": {
                        "type": "string",
                        "description": "application type - use JGR for Jaeger apps"
                      },
                      "created": {
                        "type": "object",
                        "description": "activity log for application created",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "created timestamp"
                          }
                        }
                      },
                      "description": {
                        "type": "string",
                        "description": "application description"
                      },
                      "icon": {
                        "type": "string",
                        "description": "URL for the icon"
                      },
                      "images": {
                      "type": "object",
                      "properties": {
                        "featuredImage1": {
                          "type": "string"
                        },
                        "featuredImage2": {
                          "type": "string"
                        },
                        "featuredImage3": {
                          "type": "string"
                        },
                        "featuredImage4": {
                          "type": "string"
                        },
                        "featuredImage5": {
                          "type": "string"
                        }
                        }
                      },
                      "lastModified": {
                        "type": "object",
                        "description": "activity log for application last modified",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "last modified timestamp"
                          }
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "application name"
                      },
                      "reviewed": {
                        "type": "object",
                        "description": "activity log for application reviewed",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "reviewed timestamp"
                          },
                          "notes": {
                            "type": "string",
                            "description": "reviewer notes"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "application status"
                      },
                      "submitted": {
                        "type": "object",
                        "description": "activity log for application submitted",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "submitted timestamp"
                          },
                          "notes": {
                            "type": "string",
                            "description": "submitter notes"
                          }
                        }
                      },
                      "support": {
                        "type": "object",
                        "description": "support information for the application",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "contact": {
                            "type": "string"
                          },
                          "website": {
                            "type": "string"
                          }
                        }
                      },
                      "title": {
                        "type": "string"
                      },
                      "workspaces": {
                        "type": "array",
                        "description": "list of workspaces in the application",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "workspace id"
                            },
                            "name": {
                              "type": "string",
                              "description": "workspace name"
                            },
                            "endPoint": {
                              "type": "string"
                            },
                            "deepLink": {
                              "type": "string"
                            },
                            "shellProps": {
                              "type": "string"
                            },
                            "releaseNotes": {
                              "type": "string"
                            },
                            "allowlist": {
                              "type": "object",
                              "description": "list of allowlisted users & orgs",
                              "properties": {
                                "users": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "guid": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "orgs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "orgId": {
                                        "type": "string"
                                      },
                                      "orgName": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
            "source": "curl --request PATCH \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
            },
            {
              "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D',\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\"\n\n\treq, _ := http.NewRequest(\"PATCH\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PATCH\", \"/api/organizations/%7BorgId%7D/apps/%7BappId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        },
      "delete": {
        "summary": "delete an Application",
          "tags": [
            "AppRegistry"
          ],
          "parameters": [
            {
              "name": "orgId",
              "description": "AMS Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "appId",
              "description": "Application id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "description": "Authorization",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
        "responses": {
          "200": {
            "description": "Application Deleted Successfully"
                    },
          "400": {
            "description": "Bad Request"
                    },
          "401": {
            "description": "Unauthorized"
                          },
          "403": {
            "description": "Forbidden"
                    },
          "404": {
            "description": "Not Found"
                    },
          "500": {
            "description": "Internal Server Error"
                      }
                    },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
                    },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D',\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                        },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                        },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/api/organizations/%7BorgId%7D/apps/%7BappId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                        },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                        },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                        }
        ]
                      }
                    },
    "/organizations/{orgId}/apps/searchName/{appName}": {
      "get": {
        "summary": "get Application by Name",
        "tags": [
          "AppRegistry"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "AMS Organization ID",
            "in": "path",
            "required": true,
            "schema": {
                          "type": "string"
                        }
                          },
          {
            "name": "appName",
            "description": "Application name",
            "in": "path",
            "required": true,
            "schema": {
                                      "type": "string"
                                    }
                                    },
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
                                      "type": "string"
                                    }
                                  }
        ],
          "responses": {
            "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appId": {
                      "type": "string",
                      "description": "application id"
                    },
                    "appType": {
                      "type": "string",
                      "description": "application type - use JGR for Jaeger apps"
                    },
                    "created": {
                      "type": "object",
                      "description": "activity log for application created",
                      "properties": {
                          "by": {
                        "type": "object",
                        "properties": {
                          "guid": {
                            "type": "string",
                            "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "created timestamp"
                          }
                        }
                    },
                    "description": {
                      "type": "string",
                      "description": "application description"
                    },
                    "icon": {
                      "type": "string",
                      "description": "URL for the icon"
                    },
                    "images": {
                      "type": "object",
                      "properties": {
                        "featuredImage1": {
                          "type": "string"
                        },
                        "featuredImage2": {
                          "type": "string"
                        },
                        "featuredImage3": {
                          "type": "string"
                        },
                        "featuredImage4": {
                          "type": "string"
                        },
                        "featuredImage5": {
                          "type": "string"
                      }
                      }
                    },
                    "lastModified": {
                      "type": "object",
                      "description": "activity log for application last modified",
                      "properties": {
                        "by": {
                          "type": "object",
                          "properties": {
                            "guid": {
                              "type": "string",
                              "description": "user guid"
                            }
                          }
                        },
                        "on": {
                          "type": "string",
                          "description": "last modified timestamp"
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "application name"
                    },
                    "reviewed": {
                      "type": "object",
                      "description": "activity log for application reviewed",
                      "properties": {
                        "by": {
                          "type": "object",
                          "properties": {
                            "guid": {
                              "type": "string",
                              "description": "user guid"
                            }
                          }
                        },
                        "on": {
                          "type": "string",
                          "description": "reviewed timestamp"
                        },
                        "notes": {
                          "type": "string",
                          "description": "reviewer notes"
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "application status"
                    },
                    "submitted": {
                      "type": "object",
                      "description": "activity log for application submitted",
                      "properties": {
                        "by": {
                          "type": "object",
                          "properties": {
                            "guid": {
                              "type": "string",
                              "description": "user guid"
                            }
                          }
                        },
                        "on": {
                          "type": "string",
                          "description": "submitted timestamp"
                        },
                        "notes": {
                          "type": "string",
                          "description": "submitter notes"
                        }
                      }
                    },
                    "support": {
                      "type": "object",
                      "description": "support information for the application",
                      "properties": {
                        "email": {
                          "type": "string"
                        },
                        "contact": {
                          "type": "string"
                        },
                        "website": {
                          "type": "string"
                        }
                      }
                    },
                    "title": {
                      "type": "string"
                    },
                    "workspaces": {
                      "type": "array",
                      "description": "list of workspaces in the application",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "workspace id"
                          },
                          "name": {
                            "type": "string",
                            "description": "workspace name"
                          },
                          "endPoint": {
                            "type": "string"
                          },
                          "deepLink": {
                            "type": "string"
                          },
                          "shellProps": {
                            "type": "string"
                          },
                          "releaseNotes": {
                            "type": "string"
                          },
                          "allowlist": {
                            "type": "object",
                            "description": "list of allowlisted users & orgs",
                            "properties": {
                              "users": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "guid": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "orgs": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "orgId": {
                                      "type": "string"
                                    },
                                    "orgName": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              }
            },
            "400": {
              "description": "Bad Request"
          },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
            },
            {
              "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D',\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
      }
        },
    "/organizations/{orgId}/apps/{appId}/submit": {
      "post": {
        "summary": "submit an Application",
          "tags": [
            "AppRegistry"
          ],
          "parameters": [
            {
              "name": "orgId",
              "description": "AMS Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "appId",
              "description": "Application id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "description": "Authorization",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
            },
          "description": "submitter notes"
          },
          "responses": {
            "200": {
            "description": "Application Submitted Successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "appId": {
                        "type": "string",
                        "description": "application id"
                      },
                      "appType": {
                        "type": "string",
                        "description": "application type - use JGR for Jaeger apps"
                      },
                      "created": {
                        "type": "object",
                        "description": "activity log for application created",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "created timestamp"
                          }
                        }
                      },
                      "description": {
                        "type": "string",
                        "description": "application description"
                      },
                      "icon": {
                        "type": "string",
                        "description": "URL for the icon"
                      },
                      "images": {
                      "type": "object",
                      "properties": {
                        "featuredImage1": {
                          "type": "string"
                        },
                        "featuredImage2": {
                          "type": "string"
                        },
                        "featuredImage3": {
                          "type": "string"
                        },
                        "featuredImage4": {
                          "type": "string"
                        },
                        "featuredImage5": {
                          "type": "string"
                        }
                        }
                      },
                      "lastModified": {
                        "type": "object",
                        "description": "activity log for application last modified",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "last modified timestamp"
                          }
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "application name"
                      },
                      "reviewed": {
                        "type": "object",
                        "description": "activity log for application reviewed",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "reviewed timestamp"
                          },
                          "notes": {
                            "type": "string",
                            "description": "reviewer notes"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "application status"
                      },
                      "submitted": {
                        "type": "object",
                        "description": "activity log for application submitted",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "submitted timestamp"
                          },
                          "notes": {
                            "type": "string",
                            "description": "submitter notes"
                          }
                        }
                      },
                      "support": {
                        "type": "object",
                        "description": "support information for the application",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "contact": {
                            "type": "string"
                          },
                          "website": {
                            "type": "string"
                          }
                        }
                      },
                      "title": {
                        "type": "string"
                      },
                      "workspaces": {
                        "type": "array",
                        "description": "list of workspaces in the application",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "workspace id"
                            },
                            "name": {
                              "type": "string",
                              "description": "workspace name"
                            },
                            "endPoint": {
                              "type": "string"
                            },
                            "deepLink": {
                              "type": "string"
                            },
                            "shellProps": {
                              "type": "string"
                            },
                            "releaseNotes": {
                              "type": "string"
                            },
                            "allowlist": {
                              "type": "object",
                              "description": "list of allowlisted users & orgs",
                              "properties": {
                                "users": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "guid": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "orgs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "orgId": {
                                        "type": "string"
                                      },
                                      "orgName": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
            },
            {
              "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit',\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
        },
    "/organizations/{orgId}/apps": {
      "get": {
        "summary": "get all Applications for a user",
          "tags": [
            "AppRegistry"
          ],
          "parameters": [
            {
              "name": "orgId",
              "description": "AMS Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
            "name": "appType",
            "description": "Application type - use JGR",
            "in": "query",
              "required": true,
              "schema": {
                "type": "string"
              }
      },
            {
            "name": "offset",
            "description": "offset",
            "in": "query",
              "required": true,
              "schema": {
              "type": "integer"
              }
            },
            {
            "name": "pageSize",
            "description": "pageSize",
            "in": "query",
              "required": true,
              "schema": {
              "type": "integer"
              }
            },
            {
              "name": "Authorization",
              "description": "Authorization",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
            "type": "array",
            "items": {
                    "type": "object",
                    "properties": {
                      "appId": {
                        "type": "string",
                        "description": "application id"
                      },
                      "appType": {
                        "type": "string",
                        "description": "application type - use JGR for Jaeger apps"
                      },
                      "created": {
                        "type": "object",
                        "description": "activity log for application created",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "created timestamp"
                          }
                        }
                      },
                      "description": {
                        "type": "string",
                        "description": "application description"
                      },
                      "icon": {
                        "type": "string",
                        "description": "URL for the icon"
                      },
                      "images": {
                  "type": "object",
                  "properties": {
                    "featuredImage1": {
                      "type": "string"
                    },
                    "featuredImage2": {
                      "type": "string"
                    },
                    "featuredImage3": {
                      "type": "string"
                    },
                    "featuredImage4": {
                      "type": "string"
                    },
                    "featuredImage5": {
                      "type": "string"
                        }
                        }
                      },
                      "lastModified": {
                        "type": "object",
                        "description": "activity log for application last modified",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "last modified timestamp"
                          }
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "application name"
                      },
                      "reviewed": {
                        "type": "object",
                        "description": "activity log for application reviewed",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "reviewed timestamp"
                          },
                          "notes": {
                            "type": "string",
                            "description": "reviewer notes"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "application status"
                      },
                      "submitted": {
                        "type": "object",
                        "description": "activity log for application submitted",
                        "properties": {
                          "by": {
                            "type": "object",
                            "properties": {
                              "guid": {
                                "type": "string",
                                "description": "user guid"
                              }
                            }
                          },
                          "on": {
                            "type": "string",
                            "description": "submitted timestamp"
                          },
                          "notes": {
                            "type": "string",
                            "description": "submitter notes"
                          }
                        }
                      },
                      "support": {
                        "type": "object",
                        "description": "support information for the application",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "contact": {
                            "type": "string"
                          },
                          "website": {
                            "type": "string"
                          }
                        }
                      },
                      "title": {
                        "type": "string"
                      },
                      "workspaces": {
                        "type": "array",
                        "description": "list of workspaces in the application",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "workspace id"
                            },
                            "name": {
                              "type": "string",
                              "description": "workspace name"
                            },
                            "endPoint": {
                              "type": "string"
                            },
                            "deepLink": {
                              "type": "string"
                            },
                            "shellProps": {
                              "type": "string"
                            },
                            "releaseNotes": {
                              "type": "string"
                            },
                            "allowlist": {
                              "type": "object",
                              "description": "list of allowlisted users & orgs",
                              "properties": {
                                "users": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "guid": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "orgs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "orgId": {
                                        "type": "string"
                                      },
                                      "orgName": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
            "source": "curl --request GET \\\n  --url 'https://developers.adobe.io/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE' \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
            },
            {
              "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/apps',\n  qs: {\n    appType: 'SOME_STRING_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    pageSize: 'SOME_INTEGER_VALUE'\n  },\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/apps');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'appType' => 'SOME_STRING_VALUE',\n  'offset' => 'SOME_INTEGER_VALUE',\n  'pageSize' => 'SOME_INTEGER_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/apps/health": {
        "get": {
          "summary": "get AppRegistry Health",
          "tags": [
            "AppRegistry"
          ],
          "parameters": [
            {
              "name": "orgId",
              "description": "AMS Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "description": "Authorization",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                              }
                              }
                            }
                          }
                        }
                      },
            "400": {
              "description": "Bad Request"
                      },
            "401": {
              "description": "Unauthorized"
                      },
            "403": {
              "description": "Forbidden"
                      },
            "404": {
              "description": "Not Found"
                          },
            "500": {
              "description": "Internal Server Error"
                        }
                      },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/health \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
                      },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/health',\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                          },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/health');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                          },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/health\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
                      },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/health\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                      },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/apps/health\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                          },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/health\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                          },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/apps/health\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                          }
          ]
                        }
                      },
    "/organizations/{orgId}/policy/{intId}": {
        "get": {
        "summary": "get Application Policy",
          "tags": [
          "AtlasPolicyEngine"
        ],
        "operationId": "getApplicationPolicy",
        "parameters": [
          {
            "name": "orgId",
            "description": "AMS Organization ID",
            "in": "path",
            "required": true,
            "schema": {
                            "type": "string"
            }
                          },
          {
            "name": "intId",
            "description": "Integration ID",
            "in": "path",
            "required": true,
            "schema": {
                            "type": "string"
            }
                          }
          ],
          "responses": {
            "200": {
            "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                          "type": "object",
                          "properties": {
                    "orgCode": {
                              "type": "string",
                      "description": "IMS org id"
                            },
                    "appCode": {
                              "type": "string",
                      "description": "AMS application id"
                            },
                    "appPolicyCode": {
                              "type": "string"
                            },
                    "apiKey": {
                              "type": "string"
                            },
                    "quotaPolicyCode": {
                              "type": "string"
                            },
                    "planCode": {
                              "type": "string"
                            },
                    "status": {
                              "type": "string"
                            },
                    "_links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                          "deprecation": {
                                        "type": "string"
                                      },
                          "href": {
                                        "type": "string"
                          },
                          "hreflang": {
                            "type": "string"
                          },
                          "media": {
                                "type": "string"
                              },
                          "rel": {
                                        "type": "string"
                              },
                          "templated": {
                            "type": "boolean"
                                },
                          "title": {
                                        "type": "string"
                                      },
                          "type": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
            },
            {
              "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D',\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/policy/%7BintId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
    "/organizations/{orgId}/policy/{intId}/usage": {
        "get": {
        "summary": "get Quota Usage",
          "tags": [
          "AtlasPolicyEngine"
          ],
          "operationId": "getQuotaUsage",
          "parameters": [
            {
              "name": "orgId",
              "description": "AMS Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
            "name": "intId",
            "description": "Integration ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
                              }
          }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                    "policyCode": {
                      "type": "string"
                        },
                    "planCode": {
                          "type": "string"
                    },
                    "orgCode": {
                      "type": "string"
                    },
                    "refreshCycle": {
                      "type": "string"
                    },
                    "policyType": {
                      "type": "string"
                    },
                      "status": {
                        "type": "string"
                    },
                    "availableQuantity": {
                      "type": "integer"
                    },
                    "consumedQuantity": {
                      "type": "integer"
                    },
                    "selectors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "selector": {
                          "type": "string"
                          },
                          "consumedQuantity": {
                            "type": "integer"
                      }
                    }
                  }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
            "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
            },
            {
              "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage',\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations": {
        "get": {
          "summary": "List organizations of a user",
          "tags": [
            "Organizations"
          ],
          "operationId":"getOrganizations",
          "responses": {
            "200": {
              "description": "Successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "description": "ConsumerType enum [\"adobeid\",\"entp\",\"internal\",\"direct\"]"
                        },
                        "idAlias": {
                          "type": "string"
                        },
                        "roles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "principal": {
                                "type": "string"
                              },
                              "organization": {
                                "type": "string"
                              },
                              "nameRole": {
                                "type": "string"
                              },
                              "target": {
                                "type": "string"
                              },
                              "targetType": {
                                "type": "string"
                              },
                              "targetData": {
                                "type": "linkedHashMap<string, string>"
                              }
                            }
                          }
                        },
                        "role": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-code-samples": []
        },
        "post": {
          "summary": "create an IMS Org",
          "tags": [
            "Organizations"
          ],
        "parameters": [
          {
            "name": "Authorization",
            "description": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                "required": [
                  "type",
                  "name"
                ],
                  "properties": {
                    "name": {
                      "type": "string"
                  },
                  "offer_id": {
                    "type": "string"
                  },
                  "org_id": {
                    "type": "string"
                  },
                  "locale": {
                    "type": "string"
                    }
                  }
                }
              }
            },
            "description": "build org request"
          },
          "responses": {
            "201": {
              "description": "IMS Org Created Successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "code": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "ConsumerType enum [\"adobeid\",\"entp\",\"internal\",\"direct\"]"
                      },
                      "idAlias": {
                        "type": "string"
                      },
                      "roles": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "principal": {
                              "type": "string"
                            },
                            "organization": {
                              "type": "string"
                            },
                            "nameRole": {
                              "type": "string"
                            },
                            "target": {
                              "type": "string"
                            },
                            "targetType": {
                              "type": "string"
                            },
                            "targetData": {
                              "type": "linkedHashMap<string, string>"
                            }
                          }
                        }
                      },
                      "role": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers.adobe.io/api/organizations \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"offer_id\":\"string\",\"org_id\":\"string\",\"locale\":\"string\"}'"
            },
            {
              "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://developers.adobe.io/api/organizations',\n  headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'},\n  body: {name: 'string', offer_id: 'string', org_id: 'string', locale: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"name\":\"string\",\"offer_id\":\"string\",\"org_id\":\"string\",\"locale\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers.adobe.io/api/organizations\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\")\n  .asString();"
            },
            {
              "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/organizations\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects": {
        "get": {
          "summary": "Get projects by orgId",
          "tags": [
            "projects"
          ],
          "operationId": "getProjectsForOrg",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Found projects",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Project id"
                        },
                        "name": {
                          "type": "string",
                          "description": "Project name"
                        },
                        "description": {
                          "type": "string",
                          "description": "Project description"
                        },
                        "type": {
                          "type": "string",
                          "description": "Project type"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Is project enabled"
                        },
                        "deleted": {
                          "type": "boolean",
                          "description": "Is project deleted"
                        },
                        "title": {
                          "type": "string",
                          "description": "Project title"
                        },
                        "org_id": {
                          "type": "string",
                          "description": "Org id"
                        },
                        "date_created": {
                          "type": "string",
                          "format": "date",
                          "description": "Project create date"
                        },
                        "date_last_modified": {
                          "type": "string",
                          "format": "date",
                          "description": "Project last modify date"
                        },
                        "who_created": {
                          "type": "string",
                          "description": "Created by"
                        },
                        "who_last_modified": {
                          "type": "string",
                          "description": "Last modified by"
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error getting projects"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        },
        "post": {
          "summary": "Create a new project",
          "tags": [
            "projects"
          ],
          "operationId": "createProject",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "title",
                    "whoCreated",
                    "description",
                    "type"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "who_created": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                  },
                  "appName": {
                    "type": "string",
                    "description": "Application type, mandatory field for project type = jaeger"
                    }
                  }
                }
              }
            },
            "description": "New project info",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Create project success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string",
                        "description": "Project id"
                      },
                      "projectType": {
                        "type": "string",
                        "description": "Project type"
                      },
                      "workspaceId": {
                        "type": "string",
                        "description": "Workspace id"
                      }
                    }
                  }
                }
              }
            },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
            "500": {
            "description": "Internal Server Error"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
            "source": "curl --request POST \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\",\"appName\":\"string\"}'"
            },
            {
              "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    name: 'string',\n    title: 'string',\n    who_created: 'string',\n    description: 'string',\n    type: 'string',\n    appName: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\",\"appName\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"appName\\\":\\\"string\\\"}\")\n  .asString();"
            },
            {
              "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"appName\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"appName\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/projects\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
            "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"appName\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"appName\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects/{projectId}/workspaces": {
        "post": {
          "summary": "Create a new workspace",
          "tags": [
            "workspaces"
          ],
          "operationId": "createWorkspace",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "title",
                    "whoCreated",
                    "description",
                    "quotaUsage"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "whoCreated": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "quotaRule": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "New workspace info",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Create workspace success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string",
                        "description": "Project id"
                      },
                      "workspaceId": {
                        "type": "string",
                        "description": "Workspace id"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error creating workspace"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request POST \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"whoCreated\":\"string\",\"description\":\"string\",\"type\":\"string\",\"quotaRule\":\"string\"}'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    name: 'string',\n    title: 'string',\n    whoCreated: 'string',\n    description: 'string',\n    type: 'string',\n    quotaRule: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"whoCreated\":\"string\",\"description\":\"string\",\"type\":\"string\",\"quotaRule\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.post(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoCreated\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"quotaRule\\\":\\\"string\\\"}\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoCreated\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"quotaRule\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoCreated\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"quotaRule\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoCreated\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"quotaRule\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoCreated\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"quotaRule\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        },
        "get": {
          "summary": "Get workspaces for a project",
          "tags": [
            "projects"
          ],
          "operationId": "getWorkspacesByProjectId",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Workspaces for project",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Workspace id"
                        },
                        "name": {
                          "type": "string",
                          "description": "Workspace name"
                        },
                        "title": {
                          "type": "string",
                          "description": "Workspace title"
                        },
                        "description": {
                          "type": "string",
                          "description": "Workspace description"
                        },
                        "quota_usage": {
                          "type": "string",
                          "description": "Quota usage for workspace"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Is project enabled"
                        },
                        "runtime_enabled": {
                          "type": "boolean",
                          "description": "Is runtime enabled"
                        },
                        "date_created": {
                          "type": "string",
                          "format": "date",
                          "description": "Workspace create date"
                        },
                        "date_last_modified": {
                          "type": "string",
                          "format": "date",
                          "description": "Workspace last modify date"
                        },
                        "who_created": {
                          "type": "string",
                          "description": "Created by"
                        },
                        "who_last_modified": {
                          "type": "string",
                          "description": "Last modified by"
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error returning workspaces for project"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects/{projectId}": {
        "delete": {
          "summary": "Delete a project",
          "tags": [
            "projects"
          ],
          "operationId": "deleteProject",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "whoLastModified"
                  ],
                  "properties": {
                    "whoLastModified": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "User info for who deleted project",
            "required": true
          },
          "responses": {
            "200": {
              "description": "Delete project success"
            },
            "500": {
              "description": "Error deleting project"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request DELETE \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"whoLastModified\":\"string\"}'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: {whoLastModified: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"whoLastModified\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.delete(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"whoLastModified\\\":\\\"string\\\"}\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"whoLastModified\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"{\\\"whoLastModified\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"whoLastModified\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"whoLastModified\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        },
        "patch": {
          "summary": "Edit a project",
          "tags": [
            "projects"
          ],
          "operationId": "editProject",
          "parameters": [
            {
              "name": "orgId",
              "description": "Org ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "title",
                    "whoLastModified",
                    "description"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "whoLastModified": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "New project info"
          },
          "responses": {
            "200": {
              "description": "Edit project success"
            },
            "500": {
              "description": "Error editing project"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request PATCH \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    name: 'string',\n    title: 'string',\n    whoLastModified: 'string',\n    description: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.patch(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PATCH\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        },
        "get": {
          "summary": "Get project by ID",
          "tags": [
            "projects"
          ],
          "operationId": "getProjectById",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Found project",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Project id"
                      },
                      "name": {
                        "type": "string",
                        "description": "Project name"
                      },
                      "description": {
                        "type": "string",
                        "description": "Project description"
                      },
                      "type": {
                        "type": "string",
                        "description": "Project type"
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "Is project enabled"
                      },
                      "deleted": {
                        "type": "boolean",
                        "description": "Is project deleted"
                      },
                      "title": {
                        "type": "string",
                        "description": "Project title"
                      },
                      "org_id": {
                        "type": "string",
                        "description": "Org id"
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date",
                        "description": "Project create date"
                      },
                      "date_last_modified": {
                        "type": "string",
                        "format": "date",
                        "description": "Project last modify date"
                      },
                      "who_created": {
                        "type": "string",
                        "description": "Created by"
                      },
                      "who_last_modified": {
                        "type": "string",
                        "description": "Last modified by"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error getting project"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}": {
        "patch": {
          "summary": "Edit a workspace",
          "tags": [
            "workspaces"
          ],
          "operationId": "editWorkspace",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "title",
                    "whoLastModified",
                    "description"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "whoLastModified": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "New workspace info"
          },
          "responses": {
            "200": {
              "description": "Edit workspace success"
            },
            "500": {
              "description": "Error editing workspace"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request PATCH \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    name: 'string',\n    title: 'string',\n    whoLastModified: 'string',\n    description: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.patch(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PATCH\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        },
        "get": {
          "summary": "Get workspace by ID",
          "tags": [
            "workspaces"
          ],
          "operationId": "getWorkspaceById",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Found workspace",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Workspace id"
                      },
                      "name": {
                        "type": "string",
                        "description": "Workspace name"
                      },
                      "title": {
                        "type": "string",
                        "description": "Workspace title"
                      },
                      "description": {
                        "type": "string",
                        "description": "Workspace description"
                      },
                      "quota_usage": {
                        "type": "string",
                        "description": "Quota usage for workspace"
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "Is project enabled"
                      },
                      "runtime_enabled": {
                        "type": "boolean",
                        "description": "Is runtime enabled"
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date",
                        "description": "Workspace create date"
                      },
                      "date_last_modified": {
                        "type": "string",
                        "format": "date",
                        "description": "Workspace last modify date"
                      },
                      "who_created": {
                        "type": "string",
                        "description": "Created by"
                      },
                      "who_last_modified": {
                        "type": "string",
                        "description": "Last modified by"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error getting workspace"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        },
        "delete": {
          "summary": "Delete a workspace",
          "tags": [
            "workspaces"
          ],
          "operationId": "deleteWorkspace",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "whoLastModified"
                  ],
                  "properties": {
                    "whoLastModified": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "User info for who deleted workspace",
            "required": true
          },
          "responses": {
            "200": {
              "description": "Delete workspace success"
            },
            "500": {
              "description": "Error deleting workspace"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request DELETE \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"whoLastModified\":\"string\"}'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: {whoLastModified: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"whoLastModified\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.delete(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"whoLastModified\\\":\\\"string\\\"}\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"whoLastModified\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"{\\\"whoLastModified\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"whoLastModified\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"whoLastModified\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials": {
        "get": {
          "summary": "Get integrations for workspace",
          "tags": [
            "workspaces"
          ],
          "operationId": "getIntegrations",
          "parameters": [
            {
              "name": "orgId",
              "description": "Org ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Return list of integrations",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id_workspace": {
                          "type": "string",
                          "description": "Workspace id"
                        },
                        "id_integration": {
                          "type": "string",
                          "description": "Integration id"
                        },
                        "flow_type": {
                          "type": "string",
                          "description": "Flow type"
                        },
                        "integration_type": {
                          "type": "string",
                          "description": "Integration type"
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error getting integrations for workspace"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/entp": {
        "post": {
          "summary": "Create enterprise credential in workspace",
          "tags": [
            "workspaces"
          ],
          "operationId": "createEnterpriseIntegration",
          "parameters": [
            {
              "name": "orgId",
              "description": "Org ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "certificate": {
                      "description": "Credential certificate",
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "required": [
                    "certificate"
                  ]
                }
              }
            },
            "x-s2o-overloaded": true
          },
          "responses": {
            "200": {
              "description": "Return enterprise credential details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Integration id"
                        },
                        "apiKey": {
                          "type": "string",
                          "description": "Integration API Key"
                        },
                        "orgId": {
                          "type": "string",
                          "description": "IMS Org ID"
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error creating enterprise credential for workspace"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request POST \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/entp \\\n  --header 'accept: multipart/form-data' \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"description\":\"string\"}'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/entp',\n  headers: {\n    accept: 'multipart/form-data',\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: {name: 'string', description: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/entp');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'accept' => 'multipart/form-data',\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.post(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/entp\")\n  .header(\"accept\", \"multipart/form-data\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/entp\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"multipart/form-data\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'accept': \"multipart/form-data\",\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/entp\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/entp\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"multipart/form-data\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/entp\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'multipart/form-data'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ],
          "x-s2o-warning": "Operation post:api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/integrations/entp has multiple requestBodies"
        }
      },
      "/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/analytics": {
        "post": {
          "summary": "Create analytics credential in workspace",
          "tags": [
            "workspaces"
          ],
          "operationId": "createAnalyticsIntegration",
          "parameters": [
            {
              "name": "orgId",
              "description": "Org ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/components/credentials/Adobeid"
                }
              }
            },
            "description": "Analytics credential object",
            "required": true
          },
          "responses": {
            "200": {
              "description": "Return analytics credential details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Integration id"
                        },
                        "apiKey": {
                          "type": "string",
                          "description": "Integration API Key"
                        },
                        "orgId": {
                          "type": "string",
                          "description": "IMS Org ID"
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error creating analytics credential for workspace"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request POST \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/analytics \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/analytics',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    name: 'string',\n    description: 'string',\n    platform: 'string',\n    urlScheme: 'string',\n    redirectUriList: ['string'],\n    defaultRedirectUri: 'string',\n    domain: 'string',\n    approvalInfo: {\n      websiteUrl: 'string',\n      companyWebsiteUrl: 'string',\n      integrationWebsiteUrl: 'string',\n      contactEmail: 'string',\n      integrationDescription: 'string',\n      descriptionTypekit: 'string',\n      descriptionCCStorage: 'string',\n      otherCreativeSDK: 'string',\n      domain: 'string',\n      sdkComponents: ['string'],\n      requestState: 'string',\n      requestStateList: [\n        {\n          rejectReasons: 'string',\n          requestState: 'string',\n          created: 'string',\n          comments: 'string'\n        }\n      ]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/analytics');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.post(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/analytics\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/analytics\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/analytics\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/analytics\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/analytics\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/adobeId": {
        "post": {
          "summary": "Create adobeId credential in workspace",
          "tags": [
            "workspaces"
          ],
          "operationId": "createAdobeIdIntegration",
          "parameters": [
            {
              "name": "orgId",
              "description": "Org ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/components/credentials/Adobeid"
                }
              }
            },
            "description": "AdobeId credential object",
            "required": true
          },
          "responses": {
            "200": {
              "description": "Return adobeid credential details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Integration id"
                        },
                        "apiKey": {
                          "type": "string",
                          "description": "Integration API Key"
                        },
                        "orgId": {
                          "type": "string",
                          "description": "IMS Org ID"
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error creating adobeId credential for workspace"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request POST \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/adobeId \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/adobeId',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    name: 'string',\n    description: 'string',\n    platform: 'string',\n    urlScheme: 'string',\n    redirectUriList: ['string'],\n    defaultRedirectUri: 'string',\n    domain: 'string',\n    approvalInfo: {\n      websiteUrl: 'string',\n      companyWebsiteUrl: 'string',\n      integrationWebsiteUrl: 'string',\n      contactEmail: 'string',\n      integrationDescription: 'string',\n      descriptionTypekit: 'string',\n      descriptionCCStorage: 'string',\n      otherCreativeSDK: 'string',\n      domain: 'string',\n      sdkComponents: ['string'],\n      requestState: 'string',\n      requestStateList: [\n        {\n          rejectReasons: 'string',\n          requestState: 'string',\n          created: 'string',\n          comments: 'string'\n        }\n      ]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/adobeId');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.post(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/adobeId\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/adobeId\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/adobeId\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/adobeId\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/adobeId\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/{integrationType}/{integrationId}/services": {
        "put": {
        "summary": "Subscribe integration to services",
          "tags": [
            "workspaces"
          ],
          "operationId": "subscribeIntegrationToServices",
          "parameters": [
            {
              "name": "orgId",
              "description": "Org ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "integrationType",
              "description": "Type of integration (adobeid, analytics, entp)",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "integrationId",
              "description": "ID of integration",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/components/services/SubscribeToServices"
                }
              }
            },
            "description": "SDK codes to add to integration"
          },
          "responses": {
            "200": {
              "description": "List of services integration is subscribed to",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "sdkList": {
                          "type": "string",
                          "description": "List of SDK codes associated with integration"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Integration not found"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request PUT \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationType%7D/%7BintegrationId%7D/services \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE' \\\n  --data '[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}],\"roles\":[{\"id\":0,\"code\":\"string\",\"name\":\"string\"}]}]'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'PUT',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationType%7D/%7BintegrationId%7D/services',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  },\n  body: [\n    {\n      sdkCode: 'string',\n      licenseConfigs: [{productId: 'string', id: 'string', op: 'string'}],\n      roles: [{id: 0, code: 'string', name: 'string'}]\n    }\n  ],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationType%7D/%7BintegrationId%7D/services');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}],\"roles\":[{\"id\":0,\"code\":\"string\",\"name\":\"string\"}]}]');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.put(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationType%7D/%7BintegrationId%7D/services\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .body(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationType%7D/%7BintegrationId%7D/services\"\n\n\tpayload := strings.NewReader(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\npayload = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationType%7D/%7BintegrationId%7D/services\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationType%7D/%7BintegrationId%7D/services\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationType%7D/%7BintegrationId%7D/services\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\"\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects_workspaces/credentials/{integrationId}": {
        "get": {
          "summary": "Get project/workspace IDs for an integration",
          "tags": [
            "workspaces"
          ],
          "operationId": "getProjectWorkspaceByIntegration",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "integrationId",
              "description": "Integration ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Project/workspace IDs",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "projectId": {
                          "type": "string",
                          "description": "Project id"
                        },
                        "workspaceId": {
                          "type": "string",
                          "description": "Workspace id"
                        },
                        "integrationId": {
                          "type": "string",
                          "description": "Integration id"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Integration not found / Project not found"
            },
            "500": {
              "description": "Error retrieving workspace/project info"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/integrations/%7BintegrationId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/integrations/%7BintegrationId%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/integrations/%7BintegrationId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/integrations/%7BintegrationId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/integrations/%7BintegrationId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects_workspaces/integrations/%7BintegrationId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/integrations/%7BintegrationId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/integrations/%7BintegrationId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects_workspaces/workspaces/{workspaceId}": {
        "get": {
          "summary": "Get project ID for a workspace",
          "tags": [
            "workspaces"
          ],
          "operationId": "getProjectByWorkspace",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Project ID",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "projectId": {
                          "type": "string",
                          "description": "Project id"
                        },
                        "workspaceId": {
                          "type": "string",
                          "description": "Workspace id"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Project not found"
            },
            "500": {
              "description": "Error retrieving project info"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/services": {
        "get": {
          "summary": "list services for an organization",
          "tags": [
            "Organizations"
          ],
          "operationId": "getServicesForOrg",
          "parameters": [
            {
              "name": "orgId",
              "description": "AMS org id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "string"
                  },
                  "platformList": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "docsUrl": {
                    "type": "string"
                  },
                  "learnMoreUrl": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "licenseConfigs": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "productId": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "requiresApproval": {
                    "type": "boolean"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "x-codeSamples": [
            {
              "lang": "shell",
              "source": "curl --request GET \\\n  --url https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services \\\n  --header 'Authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
            },
            {
              "lang": "node",
              "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.get(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"developers-stage.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/console/organizations/%7BorgId%7D/services\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://developers-stage.adobe.io/console/organizations/%7BorgId%7D/services\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      },
      "/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/{integrationId}": {
        "delete": {
          "summary": "Delete integration from workspace",
          "tags": [
            "workspaces"
          ],
          "operationId": "deleteIntegration",
          "parameters": [
            {
              "name": "orgId",
              "description": "Organization ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "description": "Project ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workspaceId",
              "description": "Workspace ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "integrationType",
              "description": "Type of integration (adobeid, analytics, entp)",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "integrationId",
              "description": "ID of integration",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Delete integration success"
            },
            "500": {
              "description": "Error deleting integration"
            }
          },
          "x-code-samples": [
            {
              "lang": "shell",
              "source": "curl --request DELETE \\\n  --url https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationId%7D \\\n  --header 'authorization: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: SOME_STRING_VALUE'"
            },
            {
              "lang": "node",
              "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationId%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'SOME_STRING_VALUE',\n    'x-api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
            },
            {
              "lang": "php",
              "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'SOME_STRING_VALUE',\n  'x-api-key' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
            },
            {
              "lang": "java",
              "source": "HttpResponse<String> response = Unirest.delete(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"SOME_STRING_VALUE\")\n  .header(\"x-api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
            },
            {
              "lang": "go",
              "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
            },
            {
              "lang": "python",
              "source": "import http.client\n\nconn = http.client.HTTPConnection(\"developers.adobe.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"SOME_STRING_VALUE\",\n    'x-api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
            },
            {
              "lang": "csharp",
              "source": "var client = new RestClient(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"x-api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
            },
            {
              "lang": "ruby",
              "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://developers.adobe.io/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/integrations/%7BintegrationId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'SOME_STRING_VALUE'\nrequest[\"x-api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
            }
          ]
        }
      }
    },
    "servers": [
      {
        "url": "https://{APISERVER}.adobe.io/console/",
        "variables": {
          "APISERVER": {
            "default": "developers",
            "enum": [
              "developers",
              "developers-stage"
            ]
          }
        }
      }
    ],
    "components": {
      "schemas": {
        "components": {
          "credentials": {
            "Adobeid": {
              "type": "object",
              "required": [
                "name",
                "description",
                "platform"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "platform": {
                  "type": "string"
                },
                "urlScheme": {
                  "type": "string"
                },
                "redirectUriList": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "defaultRedirectUri": {
                  "type": "string"
                },
                "domain": {
                  "type": "string"
                },
                "approvalInfo": {
                  "type": "object",
                  "properties": {
                    "websiteUrl": {
                      "type": "string"
                    },
                    "companyWebsiteUrl": {
                      "type": "string"
                    },
                    "integrationWebsiteUrl": {
                      "type": "string"
                    },
                    "contactEmail": {
                      "type": "string"
                    },
                    "integrationDescription": {
                      "type": "string"
                    },
                    "descriptionTypekit": {
                      "type": "string"
                    },
                    "descriptionCCStorage": {
                      "type": "string"
                    },
                    "otherCreativeSDK": {
                      "type": "string"
                    },
                    "domain": {
                      "type": "string"
                    },
                    "sdkComponents": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "requestState": {
                      "type": "string"
                    },
                    "requestStateList": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "rejectReasons": {
                            "type": "string"
                          },
                          "requestState": {
                            "type": "string"
                          },
                          "created": {
                            "type": "string"
                          },
                          "comments": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "Entp": {
              "type": "object",
              "required": [
                "name",
                "description"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          },
          "services": {
            "SubscribeToServices": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "sdkCode": {
                    "type": "string"
                  },
                  "licenseConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "productId": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "op": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "code": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
